{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///newrelic-video-html5.min.js","webpack:///webpack/bootstrap b155f431a65c53e8c3d8","webpack:///./node_modules/newrelic-video-core/src/log.js","webpack:///./node_modules/newrelic-video-core/src/chrono.js","webpack:///./node_modules/newrelic-video-core/src/index.js","webpack:///./node_modules/newrelic-video-core/src/emitter.js","webpack:///./node_modules/newrelic-video-core/src/tracker.js","webpack:///./node_modules/newrelic-video-core/package.json","webpack:///./node_modules/newrelic-video-core/src/videotrackerstate.js","webpack:///./src/index.js","webpack:///./node_modules/newrelic-video-core/src/core.js","webpack:///./node_modules/newrelic-video-core/src/constants.js","webpack:///./node_modules/newrelic-video-core/src/videotracker.js","webpack:///./src/tracker.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","_report","msg","level","color","Log","Levels","NOTICE","prefix","includeTime","_getCurrentTime","_level2letter","SILENT","colorful","document","documentMode","_plainReport","logMethod","ERROR","console","error","WARNING","warn","DEBUG","debug","log","splice","apply","Date","getDate","slice","getMinutes","getSeconds","getMilliseconds","Array","_letters","value","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","_len","arguments","_key","_len2","_key2","_len3","_key3","_len4","_key4","extraEvents","report","e","type","playerEvents","shift","concat","window","on","addEventListener","addEventHandler","err","ALL","4","3","2","1","location","search","exec","default","Chrono","reset","startTime","stopTime","offset","getTime","getDeltaTime","chrono","_interopRequireDefault","obj","version","Core","VideoTrackerState","VideoTracker","Tracker","Emitter","Constants","undefined","_core","_core2","_constants","_constants2","_chrono","_chrono2","_log","_log2","_emitter","_emitter2","_tracker","_tracker2","_videotracker","_videotracker2","_videotrackerstate","_videotrackerstate2","_package","event","callback","_listeners","push","index","indexOf","data","_this","isArray","forEach","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","pkg","newObj","_Emitter","options","getPrototypeOf","customData","heartbeat","parentTracker","_trackerReadyChrono","start","setOptions","unregisterListeners","_heartbeatInterval","setInterval","sendHeartbeat","bind","Math","max","getHeartbeat","clearInterval","att","send","Events","HEARTBEAT","trackerName","getTrackerName","trackerVersion","getTrackerVersion","coreVersion","timeSinceTrackerReady","emit","getAttributes","_from","_id","_inBundle","_location","_phantomChildren","_requested","raw","rawSpec","saveSpec","fetchSpec","gitCommittish","_requiredBy","_resolved","_spec","_where","author","bugs","url","bundleDependencies","dependencies","deprecated","description","devDependencies","aws-sdk","babel-core","babel-loader","babel-preset-env","chai","ink-docstrap","jsdoc","jsdoc-babel","mocha","nyc","sinon","webpack","homepage","license","main","repository","scripts","build","build:dev","clean","deploy","doc","test","watch","watch:dev","_createdAt","now","_viewSession","_viewCount","_isAd","numberOfErrors","numberOfAds","numberOfVideos","totalPlaytime","resetFlags","resetChronos","isPlayerReady","isRequested","isStarted","isPaused","isSeeking","isBuffering","isAdBreak","isPlaying","timeSinceRequested","timeSinceStarted","timeSincePaused","timeSinceSeekBegin","timeSinceBufferBegin","timeSinceAdBreakStart","timeSinceLastDownload","timeSinceLastHeartbeat","timeSinceLastRenditionChange","timeSinceLastAdQuartile","timeSinceLastAd","playtimeSinceLastEvent","isAd","time","random","toString","substring","getViewSession","timeSinceAdRequested","timeSinceLastAdHeartbeat","timeSinceAdStarted","timeSinceAdPaused","timeSinceAdBufferBegin","timeSinceAdSeekBegin","timeSinceAdBreakBegin","stop","_newrelicVideoCore","nrvideo","Html5Tracker","eventHandler","cleanData","notice","ret","tracker","trackers","off","dispose","newrelic","addPageAction","isErrorShown","AdPositions","PRE","MID","POST","funnelAdEvents","_Tracker","player","state","adsTracker","setPlayer","tag","setAdsTracker","setIsAd","getElementById","registerListeners","disposeAdsTracker","stopHeartbeat","getViewId","webkitVideoDecodedByteCount","bitrate","_lastWebkitBitrate","delta","seconds","round","saveNewRendition","current","getRenditionBitrate","last","_lastAdRendition","_lastRendition","videoHeight","videoWidth","duration","currentTime","currentSrc","playbackRate","muted","autoplay","preload","viewSession","viewId","playerName","getPlayerName","playerVersion","getPlayerVersion","pageUrl","href","adId","getVideoId","adTitle","getTitle","adBitrate","getBitrate","getWebkitBitrate","adRenditionName","getRenditionName","adRenditionBitrate","adRenditionHeight","getRenditionHeight","adRenditionWidth","getRenditionWidth","adDuration","getDuration","adPlayhead","getPlayhead","adLanguage","getLanguage","adSrc","getSrc","adCdn","getCdn","adIsMuted","isMuted","adFps","getFps","adQuartile","getAdQuartile","adPosition","getAdPosition","adCreativeId","getAdCreativeId","adPartner","getAdPartner","contentId","contentTitle","contentIsLive","isLive","contentBitrate","contentRenditionName","contentRenditionBitrate","contentRenditionHeight","contentRenditionWidth","contentDuration","contentPlayhead","contentLanguage","contentSrc","contentPlayrate","getPlayrate","contentIsFullscreen","isFullscreen","contentIsMuted","contentCdn","contentIsAutoplayed","isAutoplayed","contentPreload","getPreload","contentFps","getStateAttributes","goPlayerReady","PLAYER_READY","goRequest","goViewCountUp","ev","AD_REQUEST","CONTENT_REQUEST","startHeartbeat","goHeartbeat","goStart","AD_START","CONTENT_START","goEnd","AD_END","CONTENT_END","goLastAd","goPause","AD_PAUSE","CONTENT_PAUSE","goResume","AD_RESUME","CONTENT_RESUME","goBufferStart","AD_BUFFER_START","CONTENT_BUFFER_START","goBufferEnd","AD_BUFFER_END","CONTENT_BUFFER_END","goSeekStart","AD_SEEK_START","CONTENT_SEEK_START","goSeekEnd","AD_SEEK_END","CONTENT_SEEK_END","DOWNLOAD","goDownload","goError","AD_ERROR","CONTENT_ERROR","getRenditionShift","AD_RENDITION_CHANGE","CONTENT_RENDITION_CHANGE","goRenditionChange","AD_HEARTBEAT","CONTENT_HEARTBEAT","goAdBreakStart","AD_BREAK_START","goAdBreakEnd","AD_BREAK_END","quartile","AD_QUARTILE","goAdQuartile","AD_CLICK","_nrvideo$VideoTracker","debugCommonVideoEvents","onDownload","onPlay","onPlaying","onPause","onSeeking","onSeeked","onError","onEnded","onWaiting","removeEventListener","sendDownload","sendRequest","sendBufferEnd","sendResume","sendStart","sendPause","sendSeekStart","sendSeekEnd","sendError","sendEnd","networkState","NETWORK_LOADING","readyState","HAVE_FUTURE_DATA","sendBufferStart"],"mappings":"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","file":"newrelic-video-html5.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nrvideo\"] = factory();\n\telse\n\t\troot[\"nrvideo\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * @license MIT\n * newrelic-video-html5 0.1.2\n * Copyright New Relic <http://newrelic.com/>\n * @author Jordi Aguilar\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nrvideo\"] = factory();\n\telse\n\t\troot[\"nrvideo\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 7);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Static Log class\n *\n * @class\n * @static\n */\nvar Log = function () {\n  function Log() {\n    _classCallCheck(this, Log);\n  }\n\n  _createClass(Log, null, [{\n    key: 'error',\n\n    /**\n    * Sends an error console log.\n    * @param {...any} [msg] Message to show\n    * @static\n    */\n    value: function error() {\n      for (var _len = arguments.length, msg = Array(_len), _key = 0; _key < _len; _key++) {\n        msg[_key] = arguments[_key];\n      }\n\n      _report(msg, Log.Levels.ERROR, 'darkred');\n    }\n\n    /**\n     * Sends a warning console log.\n     * @method Log.warn\n     * @static\n     * @param {...any} msg Message to show\n     */\n\n  }, {\n    key: 'warn',\n    value: function warn() {\n      for (var _len2 = arguments.length, msg = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        msg[_key2] = arguments[_key2];\n      }\n\n      _report(msg, Log.Levels.WARNING, 'darkorange');\n    }\n\n    /**\n     * Sends a notice console log.\n     * @method Log.notice\n     * @static\n     * @param {...any} msg Message to show\n     */\n\n  }, {\n    key: 'notice',\n    value: function notice() {\n      for (var _len3 = arguments.length, msg = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        msg[_key3] = arguments[_key3];\n      }\n\n      _report([].slice.call(arguments), Log.Levels.NOTICE, 'darkcyan');\n    }\n\n    /**\n     * Sends a debug message to console.\n     * @method Log.debug\n     * @static\n     * @param {...any} msg Message to show\n     */\n\n  }, {\n    key: 'debug',\n    value: function debug() {\n      for (var _len4 = arguments.length, msg = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        msg[_key4] = arguments[_key4];\n      }\n\n      _report(msg, Log.Levels.DEBUG, 'indigo');\n    }\n\n    /**\n     * This utility method will add most of the HTML5 common event listeners to the player sent.\n     * Events will be reported as DEBUG level messages.\n     *\n     * @example\n     * // Already included events:\n     * ['canplay', 'buffering', 'waiting', 'ended', 'play', 'playing', 'pause', 'resume', 'error',\n     * 'abort', 'seek', 'seeking', 'seeked', 'stalled', 'dispose', 'loadeddata', 'loadstart',\n     * 'loadedmetadata']\n     *\n     * @method Log.debugCommonVideoEvents\n     * @static\n     * @param {object|function} o Object to attach the events.\n     * @param {array} [extraEvents]\n     * An array of extra events to watch. ie:  ['timeupdate', 'progress'].\n     * If the first item is null, no common events will be added.\n     * @param {function} [report] Callback function called to report events.\n     * Default calls Log.debug()\n     */\n\n  }, {\n    key: 'debugCommonVideoEvents',\n    value: function debugCommonVideoEvents(o, extraEvents, report) {\n      try {\n        if (Log.level <= Log.Levels.DEBUG) {\n          report = report || function (e) {\n            Log.debug('Event: ' + e.type);\n          };\n\n          var playerEvents = ['canplay', 'buffering', 'waiting', 'ended', 'play', 'playing', 'pause', 'resume', 'error', 'abort', 'seek', 'seeking', 'seeked', 'stalled', 'dispose', 'loadeddata', 'loadstart', 'loadedmetadata'];\n          if (extraEvents) {\n            if (extraEvents[0] === null) {\n              extraEvents.shift();\n              playerEvents = extraEvents;\n            } else {\n              playerEvents = playerEvents.concat(extraEvents);\n            }\n          }\n\n          for (var i = 0; i < playerEvents.length; i++) {\n            if (typeof o === 'function') {\n              o.call(window, playerEvents[i], report);\n            } else if (o.on) {\n              o.on(playerEvents[i], report);\n            } else if (o.addEventListener) {\n              o.addEventListener(playerEvents[i], report);\n            } else if (o.addEventHandler) {\n              o.addEventHandler(playerEvents[i], report);\n            } else {\n              Log.warn('debugCommonVideoEvents: No common listener function found for ', o);\n            }\n          }\n        }\n      } catch (err) {\n        Log.warn(err);\n      }\n    }\n  }]);\n\n  return Log;\n}();\n\n/**\n * Enum for log levels\n * @enum\n * @static\n * @var\n */\n\n\nLog.Levels = {\n  /** No console outputs */\n  SILENT: 5,\n  /** Console will show errors */\n  ERROR: 4,\n  /** Console will show warnings */\n  WARNING: 3,\n  /** Console will show notices (ie: life-cyrcle logs) */\n  NOTICE: 2,\n  /** Console will show debug messages. */\n  DEBUG: 1,\n  /** Show all messages. */\n  ALL: 0\n\n  /**\n   * Only logs of this imporance or higher will be shown.\n   * @example Log.level = Log.Levels.ALL\n   * @default Log.Levels.ERROR\n   * @static\n   */\n};Log.level = Log.Levels.ERROR;\n\n/**\n * If true, logs will be outputed with colors.\n * @default true\n * @static\n */\nLog.colorful = true;\n\n/**\n * If true, logs will include the time mark.\n * @default true\n * @static\n */\nLog.includeTime = true;\n\n/**\n * Prefix included at the start of every log.\n * @default '[New Relic]'\n * @static\n */\nLog.prefix = '[nrvideo]';\n\n// PRIVATE MEMBERS\n\n/**\n * Returns a console message\n *\n * @private\n * @param {array} msg Message array, error object or array of messages.\n * @param {Log.Level} [level=Log.Levels.NOTICE] Defines the level of the error sent.\n * Only errors with higher or equal level than Log.logLevel will be displayed.\n * @param {string} [color='darkgreen'] Color of the header\n * @see {@link Log.level}\n */\nfunction _report(msg, level, color) {\n  level = level || Log.Levels.NOTICE;\n  color = color || 'darkcyan';\n\n  var prefix = Log.prefix;\n  if (Log.includeTime) prefix += _getCurrentTime() + ' ';\n  prefix += _level2letter(level) + ':';\n\n  // Show messages in actual console if level is enought\n  if (Log.level <= level && level !== Log.Levels.SILENT) {\n    if (!Log.colorful || typeof document !== 'undefined' && document.documentMode) {\n      // document.documentMode exits only in IE\n      _plainReport(msg, prefix);\n    } else {\n      // choose log method\n      var logMethod;\n      if (level === Log.Levels.ERROR && console.error) {\n        logMethod = console.error;\n      } else if (level === Log.Levels.WARNING && console.warn) {\n        logMethod = console.warn;\n      } else if (level === Log.Levels.DEBUG && console.debug) {\n        logMethod = console.debug;\n      } else {\n        logMethod = console.log;\n      }\n\n      // print message\n      prefix = '%c' + prefix;\n      msg.splice(0, 0, prefix, 'color: ' + color);\n      logMethod.apply(console, msg);\n    }\n  }\n}\n\n/**\n * Returns the current time in format hh:mm:ss.mmm (with trailing 0s)\n * @private\n * @return {string} Current time.\n */\nfunction _getCurrentTime() {\n  var d = new Date();\n  var hh = ('0' + d.getDate()).slice(-2);\n  var mm = ('0' + d.getMinutes()).slice(-2);\n  var ss = ('0' + d.getSeconds()).slice(-2);\n  var mmm = ('00' + d.getMilliseconds()).slice(-3);\n  return '[' + hh + ':' + mm + ':' + ss + '.' + mmm + ']';\n}\n\n/**\n * Returns a console message without style\n *\n * @private\n * @param {(string|object|array)} msg Message string, object or array of messages.\n * @param {string} prefix Prefix of the message.\n */\nfunction _plainReport(msg, prefix) {\n  if (msg instanceof Array) {\n    for (var m in msg) {\n      _plainReport(msg[m], prefix);\n    }\n  } else {\n    if (typeof msg === 'string') {\n      console.log(prefix + ' ' + msg);\n    } else {\n      console.log(prefix + '↵');\n      console.log(msg);\n    }\n  }\n}\n\nvar _letters = {\n  4: 'e', // Error\n  3: 'w', // Warning\n  2: 'n', // Notice\n  1: 'd' // Debug\n\n\n  /**\n   * Transforms a level to a letter to identify every message.\n   *\n   * @private\n   * @param {sLog.Level} level Level of the message\n   */\n};function _level2letter(level) {\n  return _letters[level];\n}\n\n/**\n * This function is automatically executed at load.\n * Will search inside window.location.search for attribute 'nrvideo-debug=X'.\n * X can have one of these values, that will modify Log.Levels.\n * 5: SILENT,\n * 4: ERROR,\n * 3: WARNING,\n * 2: NOTICE,\n * 1: DEBUG,\n *\n * If nrvideo-colors=false is present, Log.colorful will be set to false.\n *\n * @private\n */\nfunction _loadLevelFromUrl() {\n  if (typeof window !== 'undefined' && window.location && window.location.search) {\n    var m = /\\?.*&*nrvideo-debug=(.+)/i.exec(window.location.search);\n    if (m !== null) {\n      if (m[1] === 'true') {\n        Log.level = Log.Levels.ALL;\n      } else {\n        Log.level = m[1];\n      }\n    }\n\n    var m2 = /\\?.*&*nrvideo-colors=false/i.exec(window.location.search);\n    if (m2 !== null) {\n      Log.colorful = false;\n    }\n  }\n}\n\n// Execute load level\n_loadLevelFromUrl();\n\nexports.default = Log;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * This class calculates time lapses between two points on time.\n */\nvar Chrono = function () {\n  /**\n   * Constructor\n   */\n  function Chrono() {\n    _classCallCheck(this, Chrono);\n\n    this.reset();\n  }\n\n  /** Reset chrono values. */\n\n\n  _createClass(Chrono, [{\n    key: \"reset\",\n    value: function reset() {\n      /** Start time */\n      this.startTime = 0;\n\n      /** Stop time */\n      this.stopTime = 0;\n\n      /**\n       * If you set an offset in a chrono, its value will be added getDeltaTime and stop.\n       *\n       * @example\n       * let chrono = new Chrono()\n       * chrono.offset = 500\n       * chrono.start()\n       * process.sleep(500)\n       * chrono.stop() // Will return 1000\n       *\n       * @type {number}\n       */\n      this.offset = 0;\n    }\n\n    /**\n     * Returns the time between start() and the last stop() in ms. Returns null if start wasn't\n     * called.\n     * @return {(number|null)} Time lapse in ms.\n     */\n\n  }, {\n    key: \"getDeltaTime\",\n    value: function getDeltaTime() {\n      if (this.startTime) {\n        return this.offset + (new Date().getTime() - this.startTime);\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Starts the chrono.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.startTime = new Date().getTime();\n      this.stopTime = 0;\n    }\n\n    /**\n     * Stops the timer and returns delta time.\n     * @return {(number|null)} Returns the delta time\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.stopTime = new Date().getTime();\n      return this.getDeltaTime();\n    }\n\n    /**\n     * Creates a copy of the chrono.\n     * @returns {Chrono} Cloned chrono\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var chrono = new Chrono();\n      chrono.startTime = this.startTime;\n      chrono.stopTime = this.stopTime;\n      chrono.offset = this.offset;\n      return chrono;\n    }\n  }]);\n\n  return Chrono;\n}();\n\nexports.default = Chrono;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.version = exports.Core = exports.VideoTrackerState = exports.VideoTracker = exports.Tracker = exports.Emitter = exports.Log = exports.Chrono = exports.Constants = undefined;\n\nvar _core = __webpack_require__(8);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _constants = __webpack_require__(9);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _chrono = __webpack_require__(1);\n\nvar _chrono2 = _interopRequireDefault(_chrono);\n\nvar _log = __webpack_require__(0);\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _emitter = __webpack_require__(3);\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _tracker = __webpack_require__(4);\n\nvar _tracker2 = _interopRequireDefault(_tracker);\n\nvar _videotracker = __webpack_require__(10);\n\nvar _videotracker2 = _interopRequireDefault(_videotracker);\n\nvar _videotrackerstate = __webpack_require__(6);\n\nvar _videotrackerstate2 = _interopRequireDefault(_videotrackerstate);\n\nvar _package = __webpack_require__(5);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Constants = _constants2.default;\nexports.Chrono = _chrono2.default;\nexports.Log = _log2.default;\nexports.Emitter = _emitter2.default;\nexports.Tracker = _tracker2.default;\nexports.VideoTracker = _videotracker2.default;\nexports.VideoTrackerState = _videotrackerstate2.default;\nexports.Core = _core2.default;\nexports.version = _package.version;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * This base class implements a basic behavior of listeners and events. Extend this object to have\n * this feature built-in inside your classes.\n *\n * @class Emitter\n */\nvar Emitter = function () {\n  function Emitter() {\n    _classCallCheck(this, Emitter);\n  }\n\n  _createClass(Emitter, [{\n    key: 'on',\n\n    /**\n     * Sets a listener to a given event. Use {@link emit} to trigger those events.\n     * Pass '*' to listen ALL events.\n     *\n     * @param {string} event Name of the event.\n     * @param {function} callback Callback of the event. Receives event and data.\n     * @return this\n     */\n    value: function on(event, callback) {\n      this._listeners = this._listeners || {};\n      if (typeof callback === 'function') {\n        this._listeners[event] = this._listeners[event] || [];\n        this._listeners[event].push(callback);\n        return this;\n      }\n    }\n\n    /**\n     * Removes given callback from the listeners of this object.\n     *\n     * @param {string} event Name of the event.\n     * @param {function} callback Callback of the event.\n     * @return this\n     */\n\n  }, {\n    key: 'off',\n    value: function off(event, callback) {\n      this._listeners = this._listeners || {};\n\n      if (this._listeners[event]) {\n        var index = this._listeners[event].indexOf(callback);\n        if (index !== -1) {\n          this._listeners[event].splice(index, 1);\n        }\n      }\n      return this;\n    }\n\n    /**\n     * Emits given event, triggering all the associated callbacks.\n     *\n     * @param {string} event Name of the event.\n     * @param {object} [data] Custom data to be sent to the callbacks.\n     * @return this\n     */\n\n  }, {\n    key: 'emit',\n    value: function emit(event, data) {\n      var _this = this;\n\n      this._listeners = this._listeners || {};\n      data = data || {};\n\n      if (Array.isArray(this._listeners[event])) {\n        this._listeners[event].forEach(function (callback) {\n          callback.call(_this, { type: event, data: data, target: _this });\n        });\n      }\n\n      if (Array.isArray(this._listeners['*'])) {\n        this._listeners['*'].forEach(function (callback) {\n          callback.call(_this, { type: event, data: data, target: _this });\n        });\n      }\n\n      return this;\n    }\n  }]);\n\n  return Emitter;\n}();\n\nexports.default = Emitter;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _package = __webpack_require__(5);\n\nvar pkg = _interopRequireWildcard(_package);\n\nvar _emitter = __webpack_require__(3);\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _chrono = __webpack_require__(1);\n\nvar _chrono2 = _interopRequireDefault(_chrono);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Tracker class provides the basic logic to extend Newrelic's Browser Agent capabilities.\n * Trackers are designed to listen third party elements (like video tags, banners, etc.) and send\n * information over to Browser Agent. Extend this class to create your own tracker, override\n * registerListeners and unregisterListeners for full coverage!\n *\n * @example\n * Tracker instances should be added to Core library to start sending data:\n * nrvideo.Core.addTracker(new Tracker())\n *\n * @extends Emitter\n */\nvar Tracker = function (_Emitter) {\n  _inherits(Tracker, _Emitter);\n\n  /**\n   * Constructor, receives options. You should call {@see registerListeners} after this.\n   *\n   * @param {Object} [options] Options for the tracker. See {@link setOptions}.\n   */\n  function Tracker(options) {\n    _classCallCheck(this, Tracker);\n\n    /**\n     * If you add something to this custom dictionary it will be added to every action. If you set\n     * any value, it will always override the values returned by the getters.\n     *\n     * @example\n     * If you define tracker.customData.contentTitle = 'a' and tracker.getTitle() returns 'b'.\n     * 'a' will prevail.\n     */\n    var _this = _possibleConstructorReturn(this, (Tracker.__proto__ || Object.getPrototypeOf(Tracker)).call(this));\n\n    _this.customData = {};\n\n    /**\n     * Set time between hearbeats, in ms.\n     */\n    _this.heartbeat = null;\n\n    /**\n     * Another Tracker instance. Useful to relate ad Trackers to their parent content Trackers.\n     * @type Tracker\n     */\n    _this.parentTracker = null;\n\n    /**\n     * Chrono that counts time since this class was instantiated.\n     * @private\n     */\n    _this._trackerReadyChrono = new _chrono2.default();\n    _this._trackerReadyChrono.start();\n\n    options = options || {};\n    _this.setOptions(options);\n    return _this;\n  }\n\n  /**\n   * Set options for the Tracker.\n   *\n   * @param {Object} [options] Options for the tracker.\n   * @param {number} [options.heartbeat] Set time between heartbeats. See {@link heartbeat}.\n   * @param {Object} [options.customData] Set custom data. See {@link customData}.\n   * @param {Tracker} [options.parentTracker] Set parent tracker. See {@link parentTracker}.\n   */\n\n\n  _createClass(Tracker, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (options) {\n        if (options.parentTracker) this.parentTracker = options.parentTracker;\n        if (options.customData) this.customData = options.customData;\n        if (options.heartbeat) this.heartbeat = options.heartbeat;\n      }\n    }\n\n    /**\n     * Prepares tracker to dispose. Calls {@see unregisterListeners} and drops references.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.unregisterListeners();\n    }\n\n    /**\n     * Override this method to register listeners to third party elements.\n     *\n     * @example\n     * class SpecificTracker extends Tracker {\n     *  registerListeners() {\n     *    this.player.on('play', () => this.playHandler)\n     *  }\n     *\n     *  playHandler() {\n     *    this.emit(Tracker.Events.REQUESTED)\n     *  }\n     * }\n     */\n\n  }, {\n    key: 'registerListeners',\n    value: function registerListeners() {}\n\n    /**\n     * Override this method to unregister listeners to third party elements created with\n     * {@see registerListeners}.\n     *\n     * @example\n     * class SpecificTracker extends Tracker {\n     *  registerListeners() {\n     *    this.player.on('play', () => this.playHandler)\n     *  }\n     *\n     *  unregisterListeners() {\n     *    this.player.off('play', () => this.playHandler)\n     *  }\n     *\n     *  playHandler() {\n     *    this.emit(Tracker.Events.REQUESTED)\n     *  }\n     * }\n     */\n\n  }, {\n    key: 'unregisterListeners',\n    value: function unregisterListeners() {}\n\n    /**\n     * Returns heartbeat time interval. 30000 (30s) if not set. See {@link setOptions}.\n     * @return {number} Heartbeat interval in ms.\n     * @final\n     */\n\n  }, {\n    key: 'getHeartbeat',\n    value: function getHeartbeat() {\n      if (this.heartbeat) {\n        return this.heartbeat;\n      } else if (this.parentTracker && this.parentTracker.heartbeat) {\n        return this.parentTracker.heartbeat;\n      } else {\n        return 30000;\n      }\n    }\n\n    /**\n     * Starts heartbeating. Interval period set by options.heartbeat. Min 5000 ms.\n     * This method is automaticaly called by the tracker once sendRequest is called.\n     */\n\n  }, {\n    key: 'startHeartbeat',\n    value: function startHeartbeat() {\n      this._heartbeatInterval = setInterval(this.sendHeartbeat.bind(this), Math.max(this.getHeartbeat(), 5000));\n    }\n\n    /**\n     * Stops heartbeating. This method is automaticaly called by the tracker.\n     */\n\n  }, {\n    key: 'stopHeartbeat',\n    value: function stopHeartbeat() {\n      if (this._heartbeatInterval) {\n        clearInterval(this._heartbeatInterval);\n      }\n    }\n\n    /**\n     * Heartbeating allows you to call this function each X milliseconds, defined by\n     * {@link getHeartbeat}. This is useful to send regular events to track changes.\n     *\n     * By default it will send {@link Tracker.Events.HEARTBEAT}.\n     * To start heartbeating use {@link startHeartbeat} and to stop them use {@link stopHeartbeat}.\n     *\n     * @example\n     * Override this method to define your own Heartbeat reporting.\n     *\n     * class TrackerChild extends Tracker {\n     *  sendHeartbeat (att) {\n     *    this.send('MY_HEARBEAT_EVENT')\n     *  }\n     * }\n     *\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendHeartbeat',\n    value: function sendHeartbeat(att) {\n      this.send(Tracker.Events.HEARTBEAT, att);\n    }\n\n    /**\n     * Override this method to return attributes for actions.\n     *\n     * @example\n     * class SpecificTracker extends Tracker {\n     *  getAttributes(att) {\n     *    att = att || {}\n     *    att.information = 'something'\n     *    return att\n     *  }\n     * }\n     *\n     * @param {object} [att] Collection of key value attributes\n     * @return {object} Filled attributes\n     * @final\n     */\n\n  }, {\n    key: 'getAttributes',\n    value: function getAttributes(att) {\n      att = att || {};\n      att.trackerName = this.getTrackerName();\n      att.trackerVersion = this.getTrackerVersion();\n      att.coreVersion = pkg.version;\n      att.timeSinceTrackerReady = this._trackerReadyChrono.getDeltaTime();\n\n      for (var key in this.customData) {\n        att[key] = this.customData[key];\n      }\n\n      return att;\n    }\n\n    /** Override to change of the Version of tracker. ie: '1.0.1' */\n\n  }, {\n    key: 'getTrackerVersion',\n    value: function getTrackerVersion() {\n      return pkg.version;\n    }\n\n    /** Override to change of the Name of the tracker. ie: 'custom-html5' */\n\n  }, {\n    key: 'getTrackerName',\n    value: function getTrackerName() {\n      return 'base-tracker';\n    }\n\n    /**\n     * Send given event. Will automatically call {@see getAttributes} to fill information.\n     * Internally, this will call {@see Emitter#emit}, so you could listen any event fired.\n     *\n     * @example\n     * tracker.send('BANNER_CLICK', { url: 'http....' })\n     *\n     * @param {string} event Event name\n     * @param {object} [att] Key:value dictionary filled with attributes.\n     */\n\n  }, {\n    key: 'send',\n    value: function send(event, att) {\n      this.emit(event, this.getAttributes(att));\n    }\n  }]);\n\n  return Tracker;\n}(_emitter2.default);\n\n/**\n * Enumeration of events fired by this class.\n *\n * @static\n * @memberof Tracker\n * @enum\n */\n\n\nTracker.Events = {\n  HEARTBEAT: 'HEARTBEAT'\n};\n\nexports.default = Tracker;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\"_from\":\"github:newrelic/video-core-js#v0.10.0\",\"_id\":\"newrelic-video-core@0.10.0\",\"_inBundle\":false,\"_location\":\"/newrelic-video-core\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"git\",\"raw\":\"github:newrelic/video-core-js#v0.10.0\",\"rawSpec\":\"github:newrelic/video-core-js#v0.10.0\",\"saveSpec\":\"github:newrelic/video-core-js#v0.10.0\",\"fetchSpec\":null,\"gitCommittish\":\"v0.10.0\"},\"_requiredBy\":[\"#USER\",\"/\"],\"_resolved\":\"github:newrelic/video-core-js#5c39206664b1fa0a5647a2a9e9c5a9c326cca41c\",\"_spec\":\"github:newrelic/video-core-js#v0.10.0\",\"_where\":\"/Users/jaguilargorina/workspace/nrvideo/trackers/html5\",\"author\":{\"name\":\"Jordi Aguilar\"},\"bugs\":{\"url\":\"https://github.com/newrelic/video-core-js/issues\"},\"bundleDependencies\":false,\"dependencies\":{},\"deprecated\":false,\"description\":\"New Relic video tracking core library\",\"devDependencies\":{\"aws-sdk\":\"^2.150.0\",\"babel-core\":\"^6.25.0\",\"babel-loader\":\"^7.1.1\",\"babel-preset-env\":\"^1.6.0\",\"chai\":\"^4.1.0\",\"ink-docstrap\":\"^1.3.0\",\"jsdoc\":\"^3.5.4\",\"jsdoc-babel\":\"^0.3.0\",\"mocha\":\"^3.5.0\",\"nyc\":\"^11.1.0\",\"sinon\":\"^2.4.1\",\"webpack\":\"^3.4.1\"},\"homepage\":\"https://github.com/newrelic/video-core-js#readme\",\"license\":\"MIT\",\"main\":\"src/index.js\",\"name\":\"newrelic-video-core\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/newrelic/video-core-js.git\"},\"scripts\":{\"build\":\"webpack -p\",\"build:dev\":\"webpack\",\"clean\":\"rm -rf dist coverage doc\",\"deploy\":\"node scripts/deploy.js\",\"doc\":\"jsdoc -c jsdoc.json -d doc\",\"test\":\"nyc --reporter=html --reporter=text mocha --compilers js:babel-core/register\",\"watch\":\"webpack -p --progress --color --watch\",\"watch:dev\":\"webpack --progress --color --watch\"},\"version\":\"0.10.0\"}\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _chrono = __webpack_require__(1);\n\nvar _chrono2 = _interopRequireDefault(_chrono);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * State machine for a VideoTracker and its monitored video.\n */\nvar VideoTrackerState = function () {\n  /** Constructor */\n  function VideoTrackerState() {\n    _classCallCheck(this, VideoTrackerState);\n\n    this.reset();\n\n    /**\n     * Time when the VideoTrackerState was initializated.\n     * @private\n     */\n    this._createdAt = Date.now();\n  }\n\n  /** Resets all flags and chronos. */\n\n\n  _createClass(VideoTrackerState, [{\n    key: 'reset',\n    value: function reset() {\n      /**\n       * Unique identifier of the view.\n       * @private\n       */\n      this._viewSession = null;\n\n      /**\n       * Number of views seen.\n       * @private\n       */\n      this._viewCount = 0;\n\n      /**\n       * True if it is tracking ads.\n       * @private\n       */\n      this._isAd = false;\n\n      /**\n       * Number of errors fired. 'End' resets it.\n       */\n      this.numberOfErrors = 0;\n\n      /**\n       * Number of ads shown.\n       */\n      this.numberOfAds = 0;\n\n      /**\n       * Number of videos played.\n       */\n      this.numberOfVideos = 0;\n\n      /**\n       * The amount of ms the user has been watching content (not paused, not buffering, not ads...)\n       */\n      this.totalPlaytime = 0;\n\n      this.resetFlags();\n      this.resetChronos();\n    }\n\n    /** Resets flags. */\n\n  }, {\n    key: 'resetFlags',\n    value: function resetFlags() {\n      /** True once the player has finished loading. */\n      this.isPlayerReady = false;\n\n      /** True if the video has been user-requested to play. ie: user cicks play. */\n      this.isRequested = false;\n\n      /** True if the video has starting playing. ie: actual images/audio showing in screen. */\n      this.isStarted = false;\n\n      /** True if the video is paused. */\n      this.isPaused = false;\n\n      /** True if the video is performing a seek action. */\n      this.isSeeking = false;\n\n      /** True if the video is currently buffering. */\n      this.isBuffering = false;\n\n      /** True if you are in the middle of an ad break. */\n      this.isAdBreak = false;\n\n      /** True if the video is currently playing (not buffering, not paused...) */\n      this.isPlaying = false;\n    }\n\n    /** Resets chronos. */\n\n  }, {\n    key: 'resetChronos',\n    value: function resetChronos() {\n      /** Chrono that counts time since last requested event. */\n      this.timeSinceRequested = new _chrono2.default();\n\n      /** Chrono that counts time since last start event. */\n      this.timeSinceStarted = new _chrono2.default();\n\n      /** Chrono that counts time since last pause event. */\n      this.timeSincePaused = new _chrono2.default();\n\n      /** Chrono that counts time since last seeking start event. */\n      this.timeSinceSeekBegin = new _chrono2.default();\n\n      /** Chrono that counts time since last buffering start event. */\n      this.timeSinceBufferBegin = new _chrono2.default();\n\n      /** Chrono that counts time since last ad break start event. */\n      this.timeSinceAdBreakStart = new _chrono2.default();\n\n      /** Chrono that counts time since last download event. */\n      this.timeSinceLastDownload = new _chrono2.default();\n\n      /** Chrono that counts time since last heartbeat. */\n      this.timeSinceLastHeartbeat = new _chrono2.default();\n\n      /** Chrono that counts time since last rendition change. */\n      this.timeSinceLastRenditionChange = new _chrono2.default();\n\n      /** Ads only. Chrono that counts time since last ad quartile. */\n      this.timeSinceLastAdQuartile = new _chrono2.default();\n\n      /** Content only. Chrono that counts time since last AD_END. */\n      this.timeSinceLastAd = new _chrono2.default();\n\n      /** Chrono that counts the ammount of time the video have been playing since the last event. */\n      this.playtimeSinceLastEvent = new _chrono2.default();\n    }\n\n    /** Returns true if the tracker is currently on ads. */\n\n  }, {\n    key: 'isAd',\n    value: function isAd() {\n      return this._isAd;\n    }\n\n    /** Sets if the tracker is currenlty tracking ads */\n\n  }, {\n    key: 'setIsAd',\n    value: function setIsAd(isAd) {\n      this._isAd = isAd;\n    }\n\n    /**\n     * Returns a random-generated view Session ID, useful to sort by views.\n     */\n\n  }, {\n    key: 'getViewSession',\n    value: function getViewSession() {\n      if (!this._viewSession) {\n        var time = new Date().getTime();\n        var random = Math.random().toString(36).substring(2) + Math.random().toString(36).substring(2);\n\n        this._viewSession = time + '-' + random;\n      }\n\n      return this._viewSession;\n    }\n\n    /**\n     * Returns a random-generated view Session ID, plus a view count, allowing you to distinguish\n     * between two videos played in the same session.\n     */\n\n  }, {\n    key: 'getViewId',\n    value: function getViewId() {\n      return this.getViewSession() + '-' + this._viewCount;\n    }\n\n    /**\n     * Fills given object with state-based attributes.\n     *\n     * @param {object} att Collection fo key value attributes\n     * @return {object} Filled attributes\n     */\n\n  }, {\n    key: 'getStateAttributes',\n    value: function getStateAttributes(att) {\n      att = att || {};\n\n      if (this.isAd()) {\n        // Ads only\n        if (this.isRequested) {\n          att.timeSinceAdRequested = this.timeSinceRequested.getDeltaTime();\n          att.timeSinceLastAdHeartbeat = this.timeSinceLastHeartbeat.getDeltaTime();\n        }\n        if (this.isStarted) att.timeSinceAdStarted = this.timeSinceStarted.getDeltaTime();\n        if (this.isPaused) att.timeSinceAdPaused = this.timeSincePaused.getDeltaTime();\n        if (this.isBuffering) att.timeSinceAdBufferBegin = this.timeSinceBufferBegin.getDeltaTime();\n        if (this.isSeeking) att.timeSinceAdSeekBegin = this.timeSinceSeekBegin.getDeltaTime();\n        if (this.isAdBreak) att.timeSinceAdBreakBegin = this.timeSinceAdBreakStart.getDeltaTime();\n        att.numberOfAds = this.numberOfAds;\n      } else {\n        // Content only\n        if (this.isRequested) {\n          att.timeSinceRequested = this.timeSinceRequested.getDeltaTime();\n          att.timeSinceLastHeartbeat = this.timeSinceLastHeartbeat.getDeltaTime();\n        }\n        if (this.isStarted) att.timeSinceStarted = this.timeSinceStarted.getDeltaTime();\n        if (this.isPaused) att.timeSincePaused = this.timeSincePaused.getDeltaTime();\n        if (this.isBuffering) att.timeSinceBufferBegin = this.timeSinceBufferBegin.getDeltaTime();\n        if (this.isSeeking) att.timeSinceSeekBegin = this.timeSinceSeekBegin.getDeltaTime();\n        att.timeSinceLastAd = this.timeSinceLastAd.getDeltaTime();\n        att.numberOfVideos = this.numberOfVideos;\n      }\n      att.numberOfErrors = this.numberOfErrors;\n\n      // Playtime\n      if (!this.isAd()) {\n        // Content only\n        if (this.playtimeSinceLastEvent.startTime > 0) {\n          att.playtimeSinceLastEvent = this.playtimeSinceLastEvent.getDeltaTime();\n        } else {\n          att.playtimeSinceLastEvent = 0;\n        }\n        if (this.isPlaying) {\n          this.playtimeSinceLastEvent.start();\n        } else {\n          this.playtimeSinceLastEvent.reset();\n        }\n        this.totalPlaytime += att.playtimeSinceLastEvent;\n        att.totalPlaytime = this.totalPlaytime;\n      }\n\n      return att;\n    }\n\n    /**\n     * Augments view count. This will be called with each *_START and *_END.\n     */\n\n  }, {\n    key: 'goViewCountUp',\n    value: function goViewCountUp() {\n      this._viewCount++;\n    }\n\n    /**\n     * Checks flags and changes state.\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goPlayerReady',\n    value: function goPlayerReady() {\n      if (!this.isPlayerReady) {\n        this.isPlayerReady = true;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Checks flags and changes state\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goRequest',\n    value: function goRequest() {\n      if (!this.isRequested) {\n        this.isRequested = true;\n        this.timeSinceLastAd.reset();\n        this.timeSinceRequested.start();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Checks flags and changes state\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goStart',\n    value: function goStart() {\n      if (this.isRequested && !this.isStarted) {\n        if (this.isAd()) {\n          this.numberOfAds++;\n        } else {\n          this.numberOfVideos++;\n        }\n        this.isStarted = true;\n        this.isPlaying = true;\n        this.timeSinceStarted.start();\n        this.playtimeSinceLastEvent.start();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Checks flags and changes state\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goEnd',\n    value: function goEnd() {\n      if (this.isRequested) {\n        this.numberOfErrors = 0;\n        this.isPlaying = false;\n        this.resetFlags();\n        this.timeSinceRequested.stop();\n        this.timeSinceStarted.stop();\n        this.playtimeSinceLastEvent.stop();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Checks flags and changes state\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goPause',\n    value: function goPause() {\n      if (this.isStarted && !this.isPaused) {\n        this.isPaused = true;\n        this.isPlaying = false;\n        this.timeSincePaused.start();\n        this.playtimeSinceLastEvent.stop();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Checks flags and changes state\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goResume',\n    value: function goResume() {\n      if (this.isStarted && this.isPaused) {\n        this.isPaused = false;\n        this.isPlaying = true;\n        this.timeSincePaused.stop();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Checks flags and changes state\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goBufferStart',\n    value: function goBufferStart() {\n      if (this.isStarted && !this.isBuffering) {\n        this.isBuffering = true;\n        this.isPlaying = false;\n        this.timeSinceBufferBegin.start();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Checks flags and changes state\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goBufferEnd',\n    value: function goBufferEnd() {\n      if (this.isStarted && this.isBuffering) {\n        this.isBuffering = false;\n        this.isPlaying = true;\n        this.timeSinceBufferBegin.stop();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Checks flags and changes state\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goSeekStart',\n    value: function goSeekStart() {\n      if (this.isStarted && !this.isSeeking) {\n        this.isSeeking = true;\n        this.isPlaying = false;\n        this.timeSinceSeekBegin.start();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Checks flags and changes state\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goSeekEnd',\n    value: function goSeekEnd() {\n      if (this.isStarted && this.isSeeking) {\n        this.isSeeking = false;\n        this.isPlaying = true;\n        this.timeSinceSeekBegin.stop();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Checks flags and changes state\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goAdBreakStart',\n    value: function goAdBreakStart() {\n      if (!this.isAdBreak) {\n        this.isAdBreak = true;\n        this.timeSinceAdBreakStart.start();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Checks flags and changes state\n     * @returns {boolean} True if the state changed.\n     */\n\n  }, {\n    key: 'goAdBreakEnd',\n    value: function goAdBreakEnd() {\n      if (this.isAdBreak) {\n        this.isAdBreak = false;\n        this.timeSinceAdBreakStart.stop();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Restarts download chrono.\n     */\n\n  }, {\n    key: 'goDownload',\n    value: function goDownload() {\n      this.timeSinceLastDownload.start();\n    }\n\n    /**\n     * Restarts heartbeat chrono.\n     */\n\n  }, {\n    key: 'goHeartbeat',\n    value: function goHeartbeat() {\n      this.timeSinceLastHeartbeat.start();\n    }\n\n    /**\n     * Restarts rendition change chrono.\n     */\n\n  }, {\n    key: 'goRenditionChange',\n    value: function goRenditionChange() {\n      this.timeSinceLastRenditionChange.start();\n    }\n\n    /**\n     * Restarts ad quartile chrono.\n     */\n\n  }, {\n    key: 'goAdQuartile',\n    value: function goAdQuartile() {\n      this.timeSinceLastAdQuartile.start();\n    }\n\n    /**\n     * Increments error counter.\n     */\n\n  }, {\n    key: 'goError',\n    value: function goError() {\n      this.numberOfErrors++;\n    }\n\n    /**\n     * Restarts last ad chrono.\n     */\n\n  }, {\n    key: 'goLastAd',\n    value: function goLastAd() {\n      this.timeSinceLastAd.start();\n    }\n  }]);\n\n  return VideoTrackerState;\n}();\n\nexports.default = VideoTrackerState;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _newrelicVideoCore = __webpack_require__(2);\n\nvar nrvideo = _interopRequireWildcard(_newrelicVideoCore);\n\nvar _tracker = __webpack_require__(11);\n\nvar _tracker2 = _interopRequireDefault(_tracker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nnrvideo.Html5Tracker = _tracker2.default;\nmodule.exports = nrvideo;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _log = __webpack_require__(0);\n\nvar _log2 = _interopRequireDefault(_log);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Static class that sums up core functionalities of the library.\n * @static\n */\nvar Core = function () {\n  function Core() {\n    _classCallCheck(this, Core);\n  }\n\n  _createClass(Core, null, [{\n    key: 'addTracker',\n\n    /**\n     * Add a tracker to the system. Trackers added will start reporting its events to NR's backend.\n     *\n     * @param {(Emitter|Tracker)} tracker\n     */\n    value: function addTracker(tracker) {\n      if (tracker.on && tracker.emit) {\n        trackers.push(tracker);\n        tracker.on('*', eventHandler);\n      } else {\n        _log2.default.error('Tried to load a non-tracker.', tracker);\n      }\n    }\n\n    /**\n     * Disposes and remove given tracker. Removes its listeners.\n     *\n     * @param {Tracker} tracker Tracker to remove.\n     */\n\n  }, {\n    key: 'removeTracker',\n    value: function removeTracker(tracker) {\n      tracker.off('*', eventHandler);\n      tracker.dispose();\n      var index = trackers.indexOf(tracker);\n      if (index !== -1) trackers.splice(index, 1);\n    }\n\n    /**\n     * Returns the array of trackers.\n     *\n     * @returns {Tracker[]} Array of trackers.\n     */\n\n  }, {\n    key: 'getTrackers',\n    value: function getTrackers() {\n      return trackers;\n    }\n\n    /**\n     * Sends given event. Uses newrelic Browser Agent.\n     * @param {String} event Event to send.\n     * @param {Object} data Data associated to the event.\n     */\n\n  }, {\n    key: 'send',\n    value: function send(event, data) {\n      if (typeof newrelic !== 'undefined' && newrelic.addPageAction) {\n        newrelic.addPageAction(event, data);\n      } else {\n        if (!isErrorShown) {\n          _log2.default.error('newrelic.addPageAction() is not available.', 'In order to use NewRelic Video you will need New Relic Browser Agent.');\n          isErrorShown = true;\n        }\n      }\n    }\n\n    /**\n     * Sends an error event. This may be used for external errors launched by the app, the network or\n     * any external factor. Note that errors within the player are normally reported with\n     * tracker.sendError, so this method should not be used to report those.\n     *\n     * @param {object} att attributes to be sent along the error.\n     */\n\n  }, {\n    key: 'sendError',\n    value: function sendError(att) {\n      Core.send('ERROR', att);\n    }\n  }]);\n\n  return Core;\n}();\n\nvar trackers = [];\nvar isErrorShown = false;\n\n/**\n * Logs and sends given event.\n *\n * @private\n * @param {Event} e Event\n */\nfunction eventHandler(e) {\n  var data = cleanData(e.data);\n  if (_log2.default.level <= _log2.default.Levels.DEBUG) {\n    _log2.default.notice('Sent', e.type, data);\n  } else {\n    _log2.default.notice('Sent', e.type);\n  }\n  Core.send(e.type, data);\n}\n\n/**\n * Cleans given object, removing all items with value === null.\n * @private\n * @param {Object} data Data to clean\n * @returns {Object} Cleaned object\n */\nfunction cleanData(data) {\n  var ret = {};\n  for (var i in data) {\n    if (data[i] !== null && typeof data[i] !== 'undefined') ret[i] = data[i];\n  }\n  return ret;\n}\n\nexports.default = Core;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Constants for the library.\n * @class Constants\n * @static\n */\nvar Constants = function Constants() {\n  _classCallCheck(this, Constants);\n};\n\n/**\n * Enum for types/positions of ads.\n * @example var type = Constants.AdPositions.PRE\n * @enum {String}\n */\n\n\nConstants.AdPositions = {\n  /** For ads shown before the content. */\n  PRE: 'pre',\n  /** For ads shown during the content. */\n  MID: 'mid',\n  /** For ads shown after the content. */\n  POST: 'post'\n};\n\nexports.default = Constants;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _log = __webpack_require__(0);\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _tracker = __webpack_require__(4);\n\nvar _tracker2 = _interopRequireDefault(_tracker);\n\nvar _videotrackerstate = __webpack_require__(6);\n\nvar _videotrackerstate2 = _interopRequireDefault(_videotrackerstate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Base video tracker class provides extensible tracking over video elements. See {@link Tracker}.\n * Extend this class to create your own video tracker class. Override getter methods and\n * registerListeners/unregisterListeners to provide full integration with your video experience.\n *\n * @example\n * Tracker instances should be added to Core library to start sending data:\n * nrvideo.Core.addTracker(new Tracker())\n *\n * @extends Tracker\n */\nvar VideoTracker = function (_Tracker) {\n  _inherits(VideoTracker, _Tracker);\n\n  /**\n   * Constructor, receives player and options.\n   * Lifecycle: constructor > {@link setOptions} > {@link setPlayer} > {@link registerListeners}.\n   *\n   * @param {Object} [player] Player to track. See {@link setPlayer}.\n   * @param {Object} [options] Options for the tracker. See {@link setOptions}.\n   */\n  function VideoTracker(player, options) {\n    _classCallCheck(this, VideoTracker);\n\n    /**\n     * TrackerState instance. Stores the state of the view. Tracker will automatically update the\n     * state of its instance, so there's no need to modify/interact with it manually.\n     * @type TrackerState\n     */\n    var _this = _possibleConstructorReturn(this, (VideoTracker.__proto__ || Object.getPrototypeOf(VideoTracker)).call(this));\n\n    _this.state = new _videotrackerstate2.default();\n\n    /**\n     * Another Tracker instance to track ads.\n     * @type Tracker\n     */\n    _this.adsTracker = null;\n\n    options = options || {};\n    _this.setOptions(options);\n    if (player) _this.setPlayer(player, options.tag);\n\n    _log2.default.notice('Tracker ' + _this.getTrackerName() + ' v' + _this.getTrackerVersion() + ' is ready.');\n    return _this;\n  }\n\n  /**\n   * Set options for the Tracker.\n   *\n   * @param {Object} [options] Options for the tracker.\n   * @param {Boolean} [options.isAd] True if the tracker is tracking ads. See {@link setIsAd}.\n   * @param {number} [options.heartbeat] Set time between heartbeats. See {@link heartbeat}.\n   * @param {Object} [options.customData] Set custom data. See {@link customData}.\n   * @param {Tracker} [options.parentTracker] Set parent tracker. See {@link parentTracker}.\n   * @param {Tracker} [options.adsTracker] Set ads tracker. See {@link adsTracker}.\n   * @param {Object} [options.tag] DOM element to track. See {@link setPlayer}.\n   */\n\n\n  _createClass(VideoTracker, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (options) {\n        if (options.adsTracker) this.setAdsTracker(options.adsTracker);\n        if (typeof options.isAd === 'boolean') this.setIsAd(options.isAd);\n        _tracker2.default.prototype.setOptions.apply(this, arguments);\n      }\n    }\n\n    /**\n     * Set a player and/or a tag. If there was one already defined, it will call dispose() first.\n     * Will call this.registerListeners() afterwards.\n     *\n     * @param {Object|string} player New player to save as this.player. If a string is passed,\n     * document.getElementById will be called.\n     * @param {DOMObject|string} [tag] Optional DOMElement to save as this.tag. If a string is passed,\n     * document.getElementById will be called.\n     */\n\n  }, {\n    key: 'setPlayer',\n    value: function setPlayer(player, tag) {\n      if (this.player || this.tag) this.dispose();\n\n      if (typeof document !== 'undefined' && document.getElementById) {\n        if (typeof player === 'string') player = document.getElementById(player);\n        if (typeof tag === 'string') tag = document.getElementById(tag);\n      }\n\n      tag = tag || player; // if no tag is passed, use player as both.\n\n      this.player = player;\n      this.tag = tag;\n      this.registerListeners();\n    }\n\n    /** Returns true if the tracker is currently on ads. */\n\n  }, {\n    key: 'isAd',\n    value: function isAd() {\n      return this.state.isAd();\n    }\n\n    /** Sets if the tracker is currenlty tracking ads */\n\n  }, {\n    key: 'setIsAd',\n    value: function setIsAd(isAd) {\n      this.state.setIsAd(isAd);\n    }\n\n    /**\n     * Use this function to set up a child ad tracker. You will be able to access it using\n     * this.adsTracker.\n     *\n     * @param {Tracker} tracker Ad tracker to add\n     */\n\n  }, {\n    key: 'setAdsTracker',\n    value: function setAdsTracker(tracker) {\n      this.disposeAdsTracker(); // dispose current one\n      if (tracker) {\n        this.adsTracker = tracker;\n        this.adsTracker.setIsAd(true);\n        this.adsTracker.parentTracker = this;\n        this.adsTracker.on('*', funnelAdEvents.bind(this));\n      }\n    }\n\n    /**\n     * Dispose current adsTracker.\n     */\n\n  }, {\n    key: 'disposeAdsTracker',\n    value: function disposeAdsTracker() {\n      if (this.adsTracker) {\n        this.adsTracker.off('*', funnelAdEvents);\n        this.adsTracker.dispose();\n      }\n    }\n\n    /**\n     * Prepares tracker to dispose. Calls unregisterListener and drops references to player and tag.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.stopHeartbeat();\n      this.disposeAdsTracker();\n      this.unregisterListeners();\n      this.player = null;\n      this.tag = null;\n    }\n\n    /**\n     * Override this method to register listeners to player/tag.\n     * @example\n     * class SpecificTracker extends Tracker {\n     *  registerListeners() {\n     *    this.player.on('play', () => this.playHandler)\n     *  }\n     *\n     *  playHandler() {\n     *    this.send(VideoTracker.Events.REQUESTED)\n     *  }\n     * }\n     */\n\n  }, {\n    key: 'registerListeners',\n    value: function registerListeners() {}\n\n    /**\n     * Override this method to unregister listeners to player/tag created in registerListeners\n     * @example\n     * class SpecificTracker extends Tracker {\n     *  registerListeners() {\n     *    this.player.on('play', () => this.playHandler)\n     *  }\n     *\n     *  unregisterListeners() {\n     *    this.player.off('play', () => this.playHandler)\n     *  }\n     *\n     *  playHandler() {\n     *    this.send(VideoTracker.Events.REQUESTED)\n     *  }\n     * }\n     */\n\n  }, {\n    key: 'unregisterListeners',\n    value: function unregisterListeners() {}\n\n    /**\n     * Trackers will generate unique id's for every new video iteration. If you have your own unique\n     * view value, you can override this method to return it.\n     * If the tracker has a parentTracker defined, parent viewId will be used.\n     */\n\n  }, {\n    key: 'getViewId',\n    value: function getViewId() {\n      if (this.parentTracker) {\n        return this.parentTracker.getViewId();\n      } else {\n        return this.state.getViewId();\n      }\n    }\n\n    /**\n     * Trackers will generate unique id's for every new video session. If you have your own unique\n     * view value, you can override this method to return it.\n     * If the tracker has a parentTracker defined, parent viewId will be used.\n     */\n\n  }, {\n    key: 'getViewSession',\n    value: function getViewSession() {\n      if (this.parentTracker) {\n        return this.parentTracker.getViewSession();\n      } else {\n        return this.state.getViewSession();\n      }\n    }\n\n    /** Override to return the Id of the video. */\n\n  }, {\n    key: 'getVideoId',\n    value: function getVideoId() {\n      return null;\n    }\n\n    /** Override to return Title of the video. */\n\n  }, {\n    key: 'getTitle',\n    value: function getTitle() {\n      return null;\n    }\n\n    /** Override to return True if the video is live. */\n\n  }, {\n    key: 'isLive',\n    value: function isLive() {\n      return null;\n    }\n\n    /** Override to return Bitrate (in bits) of the video. */\n\n  }, {\n    key: 'getBitrate',\n    value: function getBitrate() {\n      return null;\n    }\n\n    /** Calculates consumed bitrate using webkitVideoDecodedByteCount. */\n\n  }, {\n    key: 'getWebkitBitrate',\n    value: function getWebkitBitrate() {\n      if (this.tag && this.tag.webkitVideoDecodedByteCount) {\n        var bitrate = void 0;\n        if (this._lastWebkitBitrate) {\n          bitrate = this.tag.webkitVideoDecodedByteCount;\n          var delta = bitrate - this._lastWebkitBitrate;\n          var seconds = this.getHeartbeat() / 1000;\n          bitrate = Math.round(delta / seconds * 8);\n        }\n        this._lastWebkitBitrate = this.tag.webkitVideoDecodedByteCount;\n        return bitrate || null;\n      }\n    }\n\n    /** Override to return Name of the rendition (ie: 1080p). */\n\n  }, {\n    key: 'getRenditionName',\n    value: function getRenditionName() {\n      return null;\n    }\n\n    /** Override to return Target Bitrate of the rendition. */\n\n  }, {\n    key: 'getRenditionBitrate',\n    value: function getRenditionBitrate() {\n      return null;\n    }\n\n    /**\n     * This method will return 'up', 'down' or null depending on if the bitrate of the rendition\n     * have changed from the last time it was called.\n     *\n     * @param {boolean} [saveNewRendition=false] If true, current rendition will be stored to be used\n     * the next time this method is called. This allows you to call this.getRenditionShift() without\n     * saving the current rendition and thus preventing interferences with RENDITION_CHANGE events.\n     */\n\n  }, {\n    key: 'getRenditionShift',\n    value: function getRenditionShift(saveNewRendition) {\n      var current = this.getRenditionBitrate();\n      var last = void 0;\n      if (this.isAd()) {\n        last = this._lastAdRendition;\n        if (saveNewRendition) this._lastAdRendition = current;\n      } else {\n        last = this._lastRendition;\n        if (saveNewRendition) this._lastRendition = current;\n      }\n\n      if (!current || !last) {\n        return null;\n      } else {\n        if (current > last) {\n          return 'up';\n        } else if (current < last) {\n          return 'down';\n        } else {\n          return null;\n        }\n      }\n    }\n\n    /** Override to return renidtion actual Height (before re-scaling). */\n\n  }, {\n    key: 'getRenditionHeight',\n    value: function getRenditionHeight() {\n      return this.tag ? this.tag.videoHeight : null;\n    }\n\n    /** Override to return rendition actual Width (before re-scaling). */\n\n  }, {\n    key: 'getRenditionWidth',\n    value: function getRenditionWidth() {\n      return this.tag ? this.tag.videoWidth : null;\n    }\n\n    /** Override to return Duration of the video, in ms. */\n\n  }, {\n    key: 'getDuration',\n    value: function getDuration() {\n      return this.tag ? this.tag.duration : null;\n    }\n\n    /** Override to return Playhead (currentTime) of the video, in ms. */\n\n  }, {\n    key: 'getPlayhead',\n    value: function getPlayhead() {\n      return this.tag ? this.tag.currentTime : null;\n    }\n\n    /**\n     * Override to return Language of the video. We recommend using locale notation, ie: en_US.\n     * {@see https://gist.github.com/jacobbubu/1836273}\n     */\n\n  }, {\n    key: 'getLanguage',\n    value: function getLanguage() {\n      return null;\n    }\n\n    /** Override to return URL of the resource being played. */\n\n  }, {\n    key: 'getSrc',\n    value: function getSrc() {\n      return this.tag ? this.tag.currentSrc : null;\n    }\n\n    /** Override to return Playrate (speed) of the video. ie: 1.0, 0.5, 1.25... */\n\n  }, {\n    key: 'getPlayrate',\n    value: function getPlayrate() {\n      return this.tag ? this.tag.playbackRate : null;\n    }\n\n    /** Override to return True if the video is currently muted. */\n\n  }, {\n    key: 'isMuted',\n    value: function isMuted() {\n      return this.tag ? this.tag.muted : null;\n    }\n\n    /** Override to return True if the video is currently fullscreen. */\n\n  }, {\n    key: 'isFullscreen',\n    value: function isFullscreen() {\n      return null;\n    }\n\n    /** Override to return the CDN serving the content. */\n\n  }, {\n    key: 'getCdn',\n    value: function getCdn() {\n      return null;\n    }\n\n    /** Override to return the Name of the player. */\n\n  }, {\n    key: 'getPlayerName',\n    value: function getPlayerName() {\n      return this.getTrackerName();\n    }\n\n    /** Override to return the Version of the player. */\n\n  }, {\n    key: 'getPlayerVersion',\n    value: function getPlayerVersion() {\n      return null;\n    }\n\n    /** Override to return current FPS (Frames per second). */\n\n  }, {\n    key: 'getFps',\n    value: function getFps() {\n      return null;\n    }\n\n    /**\n     * Override to return if the player was autoplayed. By default: this.tag.autoplay\n     */\n\n  }, {\n    key: 'isAutoplayed',\n    value: function isAutoplayed() {\n      return this.tag ? this.tag.autoplay : null;\n    }\n\n    /**\n     * Override to return the player preload attribute. By default: this.tag.preload\n     */\n\n  }, {\n    key: 'getPreload',\n    value: function getPreload() {\n      return this.tag ? this.tag.preload : null;\n    }\n\n    // Only for ads\n    /**\n     * Override to return Quartile of the ad. 0 before first, 1 after first quartile, 2 after\n     * midpoint, 3 after third quartile, 4 when completed.\n     */\n\n  }, {\n    key: 'getAdQuartile',\n    value: function getAdQuartile() {\n      return null;\n    }\n\n    /**\n     * Override to return the position of the ad. Use {@link Constants.AdPositions} enum\n     * to fill this data.\n     */\n\n  }, {\n    key: 'getAdPosition',\n    value: function getAdPosition() {\n      return this.state.isStarted ? 'pre' : 'mid';\n    }\n\n    /**\n     * Override to return the ad partner. ie: ima, freewheel...\n     */\n\n  }, {\n    key: 'getAdPartner',\n    value: function getAdPartner() {\n      return null;\n    }\n\n    /**\n     * Override to return the creative id of the ad.\n     */\n\n  }, {\n    key: 'getAdCreativeId',\n    value: function getAdCreativeId() {\n      return null;\n    }\n\n    /**\n     * Do NOT override. This method fills all the appropiate attributes for tracked video.\n     *\n     * @param {object} [att] Collection of key value attributes\n     * @return {object} Filled attributes\n     * @final\n     */\n\n  }, {\n    key: 'getAttributes',\n    value: function getAttributes(att) {\n      att = _tracker2.default.prototype.getAttributes.apply(this, arguments);\n\n      if (typeof att.isAd === 'undefined') att.isAd = this.isAd();\n      att.viewSession = this.getViewSession();\n      att.viewId = this.getViewId();\n      att.playerName = this.getPlayerName();\n      att.playerVersion = this.getPlayerVersion();\n\n      try {\n        att.pageUrl = window.location.href;\n      } catch (err) {/* skip */}\n\n      if (this.isAd()) {\n        // Ads\n        att.adId = this.getVideoId();\n        att.adTitle = this.getTitle();\n        att.adBitrate = this.getBitrate() || this.getWebkitBitrate();\n        att.adRenditionName = this.getRenditionName();\n        att.adRenditionBitrate = this.getRenditionBitrate();\n        att.adRenditionHeight = this.getRenditionHeight();\n        att.adRenditionWidth = this.getRenditionWidth();\n        att.adDuration = this.getDuration();\n        att.adPlayhead = this.getPlayhead();\n        att.adLanguage = this.getLanguage();\n        att.adSrc = this.getSrc();\n        att.adCdn = this.getCdn();\n        att.adIsMuted = this.isMuted();\n        att.adFps = this.getFps();\n        // ad exclusives\n        att.adQuartile = this.getAdQuartile();\n        att.adPosition = this.getAdPosition();\n        att.adCreativeId = this.getAdCreativeId();\n        att.adPartner = this.getAdPartner();\n      } else {\n        // no ads\n        att.contentId = this.getVideoId();\n        att.contentTitle = this.getTitle();\n        att.contentIsLive = this.isLive();\n        att.contentBitrate = this.getBitrate() || this.getWebkitBitrate();\n        att.contentRenditionName = this.getRenditionName();\n        att.contentRenditionBitrate = this.getRenditionBitrate();\n        att.contentRenditionHeight = this.getRenditionHeight();\n        att.contentRenditionWidth = this.getRenditionWidth();\n        att.contentDuration = this.getDuration();\n        att.contentPlayhead = this.getPlayhead();\n        att.contentLanguage = this.getLanguage();\n        att.contentSrc = this.getSrc();\n        att.contentPlayrate = this.getPlayrate();\n        att.contentIsFullscreen = this.isFullscreen();\n        att.contentIsMuted = this.isMuted();\n        att.contentCdn = this.getCdn();\n        att.contentIsAutoplayed = this.isAutoplayed();\n        att.contentPreload = this.getPreload();\n        att.contentFps = this.getFps();\n      }\n\n      this.state.getStateAttributes(att);\n\n      for (var key in this.customData) {\n        att[key] = this.customData[key];\n      }\n\n      return att;\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendPlayerReady',\n    value: function sendPlayerReady(att) {\n      if (this.state.goPlayerReady()) {\n        att = att || {};\n        this.send(VideoTracker.Events.PLAYER_READY, att);\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners. Calls\n     * {@link startHeartbeat}.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendRequest',\n    value: function sendRequest(att) {\n      if (this.state.goRequest()) {\n        this.state.goViewCountUp();\n        var ev = this.isAd() ? VideoTracker.Events.AD_REQUEST : VideoTracker.Events.CONTENT_REQUEST;\n        this.send(ev, att);\n        this.startHeartbeat();\n        this.state.goHeartbeat();\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendStart',\n    value: function sendStart(att) {\n      if (this.state.goStart()) {\n        var ev = void 0;\n        if (this.isAd()) {\n          ev = VideoTracker.Events.AD_START;\n          if (this.parentTracker) this.parentTracker.state.isPlaying = false;\n        } else {\n          ev = VideoTracker.Events.CONTENT_START;\n        }\n        this.send(ev, att);\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners. Calls\n     * {@link stopHeartbeat}.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendEnd',\n    value: function sendEnd(att) {\n      if (this.state.goEnd()) {\n        att = att || {};\n        var ev = void 0;\n        if (this.isAd()) {\n          ev = VideoTracker.Events.AD_END;\n          att.timeSinceAdRequested = this.state.timeSinceRequested.getDeltaTime();\n          att.timeSinceAdStarted = this.state.timeSinceStarted.getDeltaTime();\n          if (this.parentTracker) this.parentTracker.state.isPlaying = true;\n        } else {\n          ev = VideoTracker.Events.CONTENT_END;\n          att.timeSinceRequested = this.state.timeSinceRequested.getDeltaTime();\n          att.timeSinceStarted = this.state.timeSinceStarted.getDeltaTime();\n        }\n        this.stopHeartbeat();\n        this.send(ev, att);\n        if (this.parentTracker && this.isAd()) this.parentTracker.state.goLastAd();\n\n        this.state.goViewCountUp();\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendPause',\n    value: function sendPause(att) {\n      if (this.state.goPause()) {\n        var ev = this.isAd() ? VideoTracker.Events.AD_PAUSE : VideoTracker.Events.CONTENT_PAUSE;\n        this.send(ev, att);\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendResume',\n    value: function sendResume(att) {\n      if (this.state.goResume()) {\n        att = att || {};\n        var ev = void 0;\n        if (this.isAd()) {\n          ev = VideoTracker.Events.AD_RESUME;\n          att.timeSinceAdPaused = this.state.timeSincePaused.getDeltaTime();\n        } else {\n          ev = VideoTracker.Events.CONTENT_RESUME;\n          att.timeSincePaused = this.state.timeSincePaused.getDeltaTime();\n        }\n        this.send(ev, att);\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendBufferStart',\n    value: function sendBufferStart(att) {\n      if (this.state.goBufferStart()) {\n        var ev = void 0;\n        if (this.isAd()) {\n          ev = VideoTracker.Events.AD_BUFFER_START;\n        } else {\n          ev = VideoTracker.Events.CONTENT_BUFFER_START;\n        }\n        this.send(ev, att);\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendBufferEnd',\n    value: function sendBufferEnd(att) {\n      if (this.state.goBufferEnd()) {\n        att = att || {};\n        var ev = void 0;\n        if (this.isAd()) {\n          ev = VideoTracker.Events.AD_BUFFER_END;\n          att.timeSinceAdBufferBegin = this.state.timeSinceBufferBegin.getDeltaTime();\n        } else {\n          ev = VideoTracker.Events.CONTENT_BUFFER_END;\n          att.timeSinceBufferBegin = this.state.timeSinceBufferBegin.getDeltaTime();\n        }\n        this.send(ev, att);\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendSeekStart',\n    value: function sendSeekStart(att) {\n      if (this.state.goSeekStart()) {\n        var ev = void 0;\n        if (this.isAd()) {\n          ev = VideoTracker.Events.AD_SEEK_START;\n        } else {\n          ev = VideoTracker.Events.CONTENT_SEEK_START;\n        }\n        this.send(ev, att);\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendSeekEnd',\n    value: function sendSeekEnd(att) {\n      if (this.state.goSeekEnd()) {\n        att = att || {};\n        var ev = void 0;\n        if (this.isAd()) {\n          ev = VideoTracker.Events.AD_SEEK_END;\n          att.timeSinceAdSeekBegin = this.state.timeSinceSeekBegin.getDeltaTime();\n        } else {\n          ev = VideoTracker.Events.CONTENT_SEEK_END;\n          att.timeSinceSeekBegin = this.state.timeSinceSeekBegin.getDeltaTime();\n        }\n        this.send(ev, att);\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     * @param {String} att.state Download requires a string to distinguish different states.\n     */\n\n  }, {\n    key: 'sendDownload',\n    value: function sendDownload(att) {\n      att = att || {};\n      if (!att.state) _log2.default.warn('Called sendDownload without { state: xxxxx }.');\n      this.send(VideoTracker.Events.DOWNLOAD, att);\n      this.state.goDownload();\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendError',\n    value: function sendError(att) {\n      att = att || {};\n      att.isAd = true;\n      this.state.goError();\n      var ev = this.isAd() ? VideoTracker.Events.AD_ERROR : VideoTracker.Events.CONTENT_ERROR;\n      this.send(ev, att);\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendRenditionChanged',\n    value: function sendRenditionChanged(att) {\n      att = att || {};\n      att.timeSinceLastRenditionChange = this.state.timeSinceLastRenditionChange.getDeltaTime();\n      att.shift = this.getRenditionShift(true);\n      var ev = void 0;\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_RENDITION_CHANGE;\n      } else {\n        ev = VideoTracker.Events.CONTENT_RENDITION_CHANGE;\n      }\n      this.send(ev, att);\n      this.state.goRenditionChange();\n    }\n\n    /**\n     * Sends associated event and changes view state. Heartbeat will automatically be sent every\n     * 10 seconds. There's no need to call this manually.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     * @param {number} att.url Url of the clicked ad.\n     *\n     */\n\n  }, {\n    key: 'sendHeartbeat',\n    value: function sendHeartbeat(att) {\n      if (this.state.isRequested) {\n        var ev = void 0;\n        if (this.isAd()) {\n          ev = VideoTracker.Events.AD_HEARTBEAT;\n        } else {\n          ev = VideoTracker.Events.CONTENT_HEARTBEAT;\n        }\n        this.send(ev, att);\n        this.state.goHeartbeat();\n      }\n    }\n\n    // Only ads\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendAdBreakStart',\n    value: function sendAdBreakStart(att) {\n      if (this.isAd() && this.state.goAdBreakStart()) {\n        this.send(VideoTracker.Events.AD_BREAK_START, att);\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     */\n\n  }, {\n    key: 'sendAdBreakEnd',\n    value: function sendAdBreakEnd(att) {\n      if (this.isAd() && this.state.goAdBreakEnd()) {\n        att = att || {};\n        att.timeSinceAdBreakBegin = this.state.timeSinceAdBreakStart.getDeltaTime();\n        this.send(VideoTracker.Events.AD_BREAK_END, att);\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     * @param {number} att.quartile Number of the quartile.\n     */\n\n  }, {\n    key: 'sendAdQuartile',\n    value: function sendAdQuartile(att) {\n      if (this.isAd()) {\n        att = att || {};\n        if (!att.quartile) _log2.default.warn('Called sendAdQuartile without { quartile: xxxxx }.');\n        att.timeSinceLastAdQuartile = this.state.timeSinceLastAdQuartile.getDeltaTime();\n        this.send(VideoTracker.Events.AD_QUARTILE, att);\n        this.state.goAdQuartile();\n      }\n    }\n\n    /**\n     * Sends associated event and changes view state. An internal state machine will prevent\n     * duplicated events. Should be associated to an event using registerListeners.\n     * @param {Object} [att] Collection of key:value attributes to send with the request.\n     * @param {number} att.url Url of the clicked ad.\n     */\n\n  }, {\n    key: 'sendAdClick',\n    value: function sendAdClick(att) {\n      if (this.isAd()) {\n        att = att || {};\n        if (!att.url) _log2.default.warn('Called sendAdClick without { url: xxxxx }.');\n        this.send(VideoTracker.Events.AD_CLICK, att);\n      }\n    }\n  }]);\n\n  return VideoTracker;\n}(_tracker2.default);\n\n/**\n * Enumeration of events fired by this class.\n *\n * @static\n * @memberof VideoTracker\n * @enum\n */\n\n\nVideoTracker.Events = {\n  // Player\n  PLAYER_READY: 'PLAYER_READY',\n  DOWNLOAD: 'DOWNLOAD',\n  ERROR: 'ERROR',\n\n  // Video\n  CONTENT_REQUEST: 'CONTENT_REQUEST',\n  CONTENT_START: 'CONTENT_START',\n  CONTENT_END: 'CONTENT_END',\n  CONTENT_PAUSE: 'CONTENT_PAUSE',\n  CONTENT_RESUME: 'CONTENT_RESUME',\n  CONTENT_SEEK_START: 'CONTENT_SEEK_START',\n  CONTENT_SEEK_END: 'CONTENT_SEEK_END',\n  CONTENT_BUFFER_START: 'CONTENT_BUFFER_START',\n  CONTENT_BUFFER_END: 'CONTENT_BUFFER_END',\n  CONTENT_HEARTBEAT: 'CONTENT_HEARTBEAT',\n  CONTENT_RENDITION_CHANGE: 'CONTENT_RENDITION_CHANGE',\n  CONTENT_ERROR: 'CONTENT_ERROR',\n\n  // Ads only\n  AD_REQUEST: 'AD_REQUEST',\n  AD_START: 'AD_START',\n  AD_END: 'AD_END',\n  AD_PAUSE: 'AD_PAUSE',\n  AD_RESUME: 'AD_RESUME',\n  AD_SEEK_START: 'AD_SEEK_START',\n  AD_SEEK_END: 'AD_SEEK_END',\n  AD_BUFFER_START: 'AD_BUFFER_START',\n  AD_BUFFER_END: 'AD_BUFFER_END',\n  AD_HEARTBEAT: 'AD_HEARTBEAT',\n  AD_RENDITION_CHANGE: 'AD_RENDITION_CHANGE',\n  AD_ERROR: 'AD_ERROR',\n  AD_BREAK_START: 'AD_BREAK_START',\n  AD_BREAK_END: 'AD_BREAK_END',\n  AD_QUARTILE: 'AD_QUARTILE',\n  AD_CLICK: 'AD_CLICK'\n\n  // Private members\n};function funnelAdEvents(e) {\n  this.send(e.type, e.data);\n}\n\nexports.default = VideoTracker;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _newrelicVideoCore = __webpack_require__(2);\n\nvar nrvideo = _interopRequireWildcard(_newrelicVideoCore);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Html5Tracker = function (_nrvideo$VideoTracker) {\n  _inherits(Html5Tracker, _nrvideo$VideoTracker);\n\n  function Html5Tracker() {\n    _classCallCheck(this, Html5Tracker);\n\n    return _possibleConstructorReturn(this, (Html5Tracker.__proto__ || Object.getPrototypeOf(Html5Tracker)).apply(this, arguments));\n  }\n\n  _createClass(Html5Tracker, [{\n    key: 'getTrackerName',\n    value: function getTrackerName() {\n      return 'html5';\n    }\n  }, {\n    key: 'getPlayhead',\n    value: function getPlayhead() {\n      return this.player.currentTime * 1000;\n    }\n  }, {\n    key: 'getDuration',\n    value: function getDuration() {\n      return this.player.duration * 1000;\n    }\n  }, {\n    key: 'getSrc',\n    value: function getSrc() {\n      return this.player.currentSrc;\n    }\n  }, {\n    key: 'isMuted',\n    value: function isMuted() {\n      return this.player.muted;\n    }\n  }, {\n    key: 'getRenditionHeight',\n    value: function getRenditionHeight() {\n      return this.player.videoHeight;\n    }\n  }, {\n    key: 'getRenditionWidth',\n    value: function getRenditionWidth() {\n      return this.player.videoWidth;\n    }\n  }, {\n    key: 'getPlayrate',\n    value: function getPlayrate() {\n      return this.player.playbackRate;\n    }\n  }, {\n    key: 'isAutoplayed',\n    value: function isAutoplayed() {\n      return this.player.autoplay;\n    }\n  }, {\n    key: 'getPreload',\n    value: function getPreload() {\n      return this.player.preload;\n    }\n  }, {\n    key: 'registerListeners',\n    value: function registerListeners() {\n      nrvideo.Log.debugCommonVideoEvents(this.player);\n\n      this.player.addEventListener('loadstart', this.onDownload.bind(this));\n      this.player.addEventListener('loadedmetadata', this.onDownload.bind(this));\n      this.player.addEventListener('loadeddata', this.onDownload.bind(this));\n      this.player.addEventListener('canplay', this.onDownload.bind(this));\n      this.player.addEventListener('play', this.onPlay.bind(this));\n      this.player.addEventListener('playing', this.onPlaying.bind(this));\n      this.player.addEventListener('pause', this.onPause.bind(this));\n      this.player.addEventListener('seeking', this.onSeeking.bind(this));\n      this.player.addEventListener('seeked', this.onSeeked.bind(this));\n      this.player.addEventListener('error', this.onError.bind(this));\n      this.player.addEventListener('ended', this.onEnded.bind(this));\n      this.player.addEventListener('waiting', this.onWaiting.bind(this));\n    }\n  }, {\n    key: 'unregisterListeners',\n    value: function unregisterListeners() {\n      this.player.removeEventListener('loadstart', this.onDownload);\n      this.player.removeEventListener('loadedmetadata', this.onDownload);\n      this.player.removeEventListener('loadeddata', this.onDownload);\n      this.player.removeEventListener('canplay', this.onDownload);\n      this.player.removeEventListener('play', this.onPlay);\n      this.player.removeEventListener('playing', this.onPlaying);\n      this.player.removeEventListener('pause', this.onPause);\n      this.player.removeEventListener('seeking', this.onSeeking);\n      this.player.removeEventListener('seeked', this.onSeeked);\n      this.player.removeEventListener('error', this.onError);\n      this.player.removeEventListener('ended', this.onEnded);\n      this.player.removeEventListener('waiting', this.onWaiting);\n    }\n  }, {\n    key: 'onDownload',\n    value: function onDownload(e) {\n      this.sendDownload({ state: e.type });\n    }\n  }, {\n    key: 'onPlay',\n    value: function onPlay() {\n      this.sendRequest();\n    }\n  }, {\n    key: 'onPlaying',\n    value: function onPlaying() {\n      this.sendBufferEnd();\n      this.sendResume();\n      this.sendStart();\n    }\n  }, {\n    key: 'onPause',\n    value: function onPause() {\n      this.sendPause();\n    }\n  }, {\n    key: 'onSeeking',\n    value: function onSeeking() {\n      this.sendSeekStart();\n    }\n  }, {\n    key: 'onSeeked',\n    value: function onSeeked() {\n      this.sendSeekEnd();\n    }\n  }, {\n    key: 'onError',\n    value: function onError() {\n      this.sendError();\n    }\n  }, {\n    key: 'onEnded',\n    value: function onEnded() {\n      this.sendEnd();\n    }\n  }, {\n    key: 'onWaiting',\n    value: function onWaiting() {\n      if (this.player.networkState === this.player.NETWORK_LOADING && this.player.readyState < this.player.HAVE_FUTURE_DATA) {\n        this.sendBufferStart();\n      }\n    }\n  }]);\n\n  return Html5Tracker;\n}(nrvideo.VideoTracker);\n\nexports.default = Html5Tracker;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// newrelic-video-html5.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b155f431a65c53e8c3d8","/**\n * Static Log class\n *\n * @class\n * @static\n */\nclass Log {\n   /**\n   * Sends an error console log.\n   * @param {...any} [msg] Message to show\n   * @static\n   */\n  static error (...msg) {\n    _report(msg, Log.Levels.ERROR, 'darkred')\n  }\n\n  /**\n   * Sends a warning console log.\n   * @method Log.warn\n   * @static\n   * @param {...any} msg Message to show\n   */\n  static warn (...msg) {\n    _report(msg, Log.Levels.WARNING, 'darkorange')\n  }\n\n  /**\n   * Sends a notice console log.\n   * @method Log.notice\n   * @static\n   * @param {...any} msg Message to show\n   */\n  static notice (...msg) {\n    _report([].slice.call(arguments), Log.Levels.NOTICE, 'darkcyan')\n  }\n\n  /**\n   * Sends a debug message to console.\n   * @method Log.debug\n   * @static\n   * @param {...any} msg Message to show\n   */\n  static debug (...msg) {\n    _report(msg, Log.Levels.DEBUG, 'indigo')\n  }\n\n  /**\n   * This utility method will add most of the HTML5 common event listeners to the player sent.\n   * Events will be reported as DEBUG level messages.\n   *\n   * @example\n   * // Already included events:\n   * ['canplay', 'buffering', 'waiting', 'ended', 'play', 'playing', 'pause', 'resume', 'error',\n   * 'abort', 'seek', 'seeking', 'seeked', 'stalled', 'dispose', 'loadeddata', 'loadstart',\n   * 'loadedmetadata']\n   *\n   * @method Log.debugCommonVideoEvents\n   * @static\n   * @param {object|function} o Object to attach the events.\n   * @param {array} [extraEvents]\n   * An array of extra events to watch. ie:  ['timeupdate', 'progress'].\n   * If the first item is null, no common events will be added.\n   * @param {function} [report] Callback function called to report events.\n   * Default calls Log.debug()\n   */\n  static debugCommonVideoEvents (o, extraEvents, report) {\n    try {\n      if (Log.level <= Log.Levels.DEBUG) {\n        report = report || function (e) {\n          Log.debug('Event: ' + e.type)\n        }\n\n        var playerEvents = [\n          'canplay', 'buffering', 'waiting', 'ended', 'play', 'playing',\n          'pause', 'resume', 'error', 'abort', 'seek', 'seeking', 'seeked',\n          'stalled', 'dispose', 'loadeddata', 'loadstart', 'loadedmetadata'\n        ]\n        if (extraEvents) {\n          if (extraEvents[0] === null) {\n            extraEvents.shift()\n            playerEvents = extraEvents\n          } else {\n            playerEvents = playerEvents.concat(extraEvents)\n          }\n        }\n\n        for (var i = 0; i < playerEvents.length; i++) {\n          if (typeof o === 'function') {\n            o.call(window, playerEvents[i], report)\n          } else if (o.on) {\n            o.on(playerEvents[i], report)\n          } else if (o.addEventListener) {\n            o.addEventListener(playerEvents[i], report)\n          } else if (o.addEventHandler) {\n            o.addEventHandler(playerEvents[i], report)\n          } else {\n            Log.warn('debugCommonVideoEvents: No common listener function found for ', o)\n          }\n        }\n      }\n    } catch (err) {\n      Log.warn(err)\n    }\n  }\n}\n\n/**\n * Enum for log levels\n * @enum\n * @static\n * @var\n */\nLog.Levels = {\n    /** No console outputs */\n  SILENT: 5,\n    /** Console will show errors */\n  ERROR: 4,\n    /** Console will show warnings */\n  WARNING: 3,\n    /** Console will show notices (ie: life-cyrcle logs) */\n  NOTICE: 2,\n    /** Console will show debug messages. */\n  DEBUG: 1,\n    /** Show all messages. */\n  ALL: 0\n}\n\n  /**\n   * Only logs of this imporance or higher will be shown.\n   * @example Log.level = Log.Levels.ALL\n   * @default Log.Levels.ERROR\n   * @static\n   */\nLog.level = Log.Levels.ERROR\n\n  /**\n   * If true, logs will be outputed with colors.\n   * @default true\n   * @static\n   */\nLog.colorful = true\n\n  /**\n   * If true, logs will include the time mark.\n   * @default true\n   * @static\n   */\nLog.includeTime = true\n\n  /**\n   * Prefix included at the start of every log.\n   * @default '[New Relic]'\n   * @static\n   */\nLog.prefix = '[nrvideo]'\n\n// PRIVATE MEMBERS\n\n/**\n * Returns a console message\n *\n * @private\n * @param {array} msg Message array, error object or array of messages.\n * @param {Log.Level} [level=Log.Levels.NOTICE] Defines the level of the error sent.\n * Only errors with higher or equal level than Log.logLevel will be displayed.\n * @param {string} [color='darkgreen'] Color of the header\n * @see {@link Log.level}\n */\nfunction _report (msg, level, color) {\n  level = level || Log.Levels.NOTICE\n  color = color || 'darkcyan'\n\n  var prefix = Log.prefix\n  if (Log.includeTime) prefix += _getCurrentTime() + ' '\n  prefix += _level2letter(level) + ':'\n\n  // Show messages in actual console if level is enought\n  if (Log.level <= level && level !== Log.Levels.SILENT) {\n    if (!Log.colorful || (typeof document !== 'undefined' && document.documentMode)) {\n      // document.documentMode exits only in IE\n      _plainReport(msg, prefix)\n    } else {\n      // choose log method\n      var logMethod\n      if (level === Log.Levels.ERROR && console.error) {\n        logMethod = console.error\n      } else if (level === Log.Levels.WARNING && console.warn) {\n        logMethod = console.warn\n      } else if (level === Log.Levels.DEBUG && console.debug) {\n        logMethod = console.debug\n      } else {\n        logMethod = console.log\n      }\n\n      // print message\n      prefix = '%c' + prefix\n      msg.splice(0, 0, prefix, 'color: ' + color)\n      logMethod.apply(console, msg)\n    }\n  }\n}\n\n/**\n * Returns the current time in format hh:mm:ss.mmm (with trailing 0s)\n * @private\n * @return {string} Current time.\n */\nfunction _getCurrentTime () {\n  var d = new Date()\n  var hh = ('0' + d.getDate()).slice(-2)\n  var mm = ('0' + d.getMinutes()).slice(-2)\n  var ss = ('0' + d.getSeconds()).slice(-2)\n  var mmm = ('00' + d.getMilliseconds()).slice(-3)\n  return '[' + hh + ':' + mm + ':' + ss + '.' + mmm + ']'\n}\n\n/**\n * Returns a console message without style\n *\n * @private\n * @param {(string|object|array)} msg Message string, object or array of messages.\n * @param {string} prefix Prefix of the message.\n */\nfunction _plainReport (msg, prefix) {\n  if (msg instanceof Array) {\n    for (var m in msg) {\n      _plainReport(msg[m], prefix)\n    }\n  } else {\n    if (typeof msg === 'string') {\n      console.log(prefix + ' ' + msg)\n    } else {\n      console.log(prefix + '↵')\n      console.log(msg)\n    }\n  }\n}\n\nconst _letters = {\n  4: 'e', // Error\n  3: 'w', // Warning\n  2: 'n', // Notice\n  1: 'd' // Debug\n}\n\n/**\n * Transforms a level to a letter to identify every message.\n *\n * @private\n * @param {sLog.Level} level Level of the message\n */\nfunction _level2letter (level) {\n  return _letters[level]\n}\n\n/**\n * This function is automatically executed at load.\n * Will search inside window.location.search for attribute 'nrvideo-debug=X'.\n * X can have one of these values, that will modify Log.Levels.\n * 5: SILENT,\n * 4: ERROR,\n * 3: WARNING,\n * 2: NOTICE,\n * 1: DEBUG,\n *\n * If nrvideo-colors=false is present, Log.colorful will be set to false.\n *\n * @private\n */\nfunction _loadLevelFromUrl () {\n  if (typeof window !== 'undefined' && window.location && window.location.search) {\n    var m = /\\?.*&*nrvideo-debug=(.+)/i.exec(window.location.search)\n    if (m !== null) {\n      if (m[1] === 'true') {\n        Log.level = Log.Levels.ALL\n      } else {\n        Log.level = m[1]\n      }\n    }\n\n    var m2 = /\\?.*&*nrvideo-colors=false/i.exec(window.location.search)\n    if (m2 !== null) {\n      Log.colorful = false\n    }\n  }\n}\n\n// Execute load level\n_loadLevelFromUrl()\n\nexport default Log\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/newrelic-video-core/src/log.js","/**\n * This class calculates time lapses between two points on time.\n */\nclass Chrono {\n  /**\n   * Constructor\n   */\n  constructor () {\n    this.reset()\n  }\n\n  /** Reset chrono values. */\n  reset () {\n    /** Start time */\n    this.startTime = 0\n\n    /** Stop time */\n    this.stopTime = 0\n\n    /**\n     * If you set an offset in a chrono, its value will be added getDeltaTime and stop.\n     *\n     * @example\n     * let chrono = new Chrono()\n     * chrono.offset = 500\n     * chrono.start()\n     * process.sleep(500)\n     * chrono.stop() // Will return 1000\n     *\n     * @type {number}\n     */\n    this.offset = 0\n  }\n\n  /**\n   * Returns the time between start() and the last stop() in ms. Returns null if start wasn't\n   * called.\n   * @return {(number|null)} Time lapse in ms.\n   */\n  getDeltaTime () {\n    if (this.startTime) {\n      return this.offset + (new Date().getTime() - this.startTime)\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * Starts the chrono.\n   */\n  start () {\n    this.startTime = new Date().getTime()\n    this.stopTime = 0\n  }\n\n  /**\n   * Stops the timer and returns delta time.\n   * @return {(number|null)} Returns the delta time\n   */\n  stop () {\n    this.stopTime = new Date().getTime()\n    return this.getDeltaTime()\n  }\n\n  /**\n   * Creates a copy of the chrono.\n   * @returns {Chrono} Cloned chrono\n   */\n  clone () {\n    var chrono = new Chrono()\n    chrono.startTime = this.startTime\n    chrono.stopTime = this.stopTime\n    chrono.offset = this.offset\n    return chrono\n  }\n}\n\nexport default Chrono\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/newrelic-video-core/src/chrono.js","import Core from './core'\nimport Constants from './constants'\nimport Chrono from './chrono'\nimport Log from './log'\nimport Emitter from './emitter'\nimport Tracker from './tracker'\nimport VideoTracker from './videotracker'\nimport VideoTrackerState from './videotrackerstate'\nimport { version } from '../package.json'\n\nexport {\n  Constants,\n  Chrono,\n  Log,\n  Emitter,\n  Tracker,\n  VideoTracker,\n  VideoTrackerState,\n  Core,\n  version\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/newrelic-video-core/src/index.js","/**\n * This base class implements a basic behavior of listeners and events. Extend this object to have\n * this feature built-in inside your classes.\n *\n * @class Emitter\n */\nclass Emitter {\n  /**\n   * Sets a listener to a given event. Use {@link emit} to trigger those events.\n   * Pass '*' to listen ALL events.\n   *\n   * @param {string} event Name of the event.\n   * @param {function} callback Callback of the event. Receives event and data.\n   * @return this\n   */\n  on (event, callback) {\n    this._listeners = this._listeners || {}\n    if (typeof callback === 'function') {\n      this._listeners[event] = this._listeners[event] || []\n      this._listeners[event].push(callback)\n      return this\n    }\n  }\n\n  /**\n   * Removes given callback from the listeners of this object.\n   *\n   * @param {string} event Name of the event.\n   * @param {function} callback Callback of the event.\n   * @return this\n   */\n  off (event, callback) {\n    this._listeners = this._listeners || {}\n\n    if (this._listeners[event]) {\n      var index = this._listeners[event].indexOf(callback)\n      if (index !== -1) {\n        this._listeners[event].splice(index, 1)\n      }\n    }\n    return this\n  }\n\n  /**\n   * Emits given event, triggering all the associated callbacks.\n   *\n   * @param {string} event Name of the event.\n   * @param {object} [data] Custom data to be sent to the callbacks.\n   * @return this\n   */\n  emit (event, data) {\n    this._listeners = this._listeners || {}\n    data = data || {}\n\n    if (Array.isArray(this._listeners[event])) {\n      this._listeners[event].forEach((callback) => {\n        callback.call(this, { type: event, data: data, target: this })\n      })\n    }\n\n    if (Array.isArray(this._listeners['*'])) {\n      this._listeners['*'].forEach((callback) => {\n        callback.call(this, { type: event, data: data, target: this })\n      })\n    }\n\n    return this\n  }\n}\n\nexport default Emitter\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/newrelic-video-core/src/emitter.js","import * as pkg from '../package.json'\nimport Emitter from './emitter'\nimport Chrono from './chrono'\n\n/**\n * Tracker class provides the basic logic to extend Newrelic's Browser Agent capabilities.\n * Trackers are designed to listen third party elements (like video tags, banners, etc.) and send\n * information over to Browser Agent. Extend this class to create your own tracker, override\n * registerListeners and unregisterListeners for full coverage!\n *\n * @example\n * Tracker instances should be added to Core library to start sending data:\n * nrvideo.Core.addTracker(new Tracker())\n *\n * @extends Emitter\n */\nclass Tracker extends Emitter {\n  /**\n   * Constructor, receives options. You should call {@see registerListeners} after this.\n   *\n   * @param {Object} [options] Options for the tracker. See {@link setOptions}.\n   */\n  constructor (options) {\n    super()\n\n    /**\n     * If you add something to this custom dictionary it will be added to every action. If you set\n     * any value, it will always override the values returned by the getters.\n     *\n     * @example\n     * If you define tracker.customData.contentTitle = 'a' and tracker.getTitle() returns 'b'.\n     * 'a' will prevail.\n     */\n    this.customData = {}\n\n    /**\n     * Set time between hearbeats, in ms.\n     */\n    this.heartbeat = null\n\n    /**\n     * Another Tracker instance. Useful to relate ad Trackers to their parent content Trackers.\n     * @type Tracker\n     */\n    this.parentTracker = null\n\n    /**\n     * Chrono that counts time since this class was instantiated.\n     * @private\n     */\n    this._trackerReadyChrono = new Chrono()\n    this._trackerReadyChrono.start()\n\n    options = options || {}\n    this.setOptions(options)\n  }\n\n  /**\n   * Set options for the Tracker.\n   *\n   * @param {Object} [options] Options for the tracker.\n   * @param {number} [options.heartbeat] Set time between heartbeats. See {@link heartbeat}.\n   * @param {Object} [options.customData] Set custom data. See {@link customData}.\n   * @param {Tracker} [options.parentTracker] Set parent tracker. See {@link parentTracker}.\n   */\n  setOptions (options) {\n    if (options) {\n      if (options.parentTracker) this.parentTracker = options.parentTracker\n      if (options.customData) this.customData = options.customData\n      if (options.heartbeat) this.heartbeat = options.heartbeat\n    }\n  }\n\n  /**\n   * Prepares tracker to dispose. Calls {@see unregisterListeners} and drops references.\n   */\n  dispose () {\n    this.unregisterListeners()\n  }\n\n  /**\n   * Override this method to register listeners to third party elements.\n   *\n   * @example\n   * class SpecificTracker extends Tracker {\n   *  registerListeners() {\n   *    this.player.on('play', () => this.playHandler)\n   *  }\n   *\n   *  playHandler() {\n   *    this.emit(Tracker.Events.REQUESTED)\n   *  }\n   * }\n   */\n  registerListeners () {}\n\n  /**\n   * Override this method to unregister listeners to third party elements created with\n   * {@see registerListeners}.\n   *\n   * @example\n   * class SpecificTracker extends Tracker {\n   *  registerListeners() {\n   *    this.player.on('play', () => this.playHandler)\n   *  }\n   *\n   *  unregisterListeners() {\n   *    this.player.off('play', () => this.playHandler)\n   *  }\n   *\n   *  playHandler() {\n   *    this.emit(Tracker.Events.REQUESTED)\n   *  }\n   * }\n   */\n  unregisterListeners () {}\n\n  /**\n   * Returns heartbeat time interval. 30000 (30s) if not set. See {@link setOptions}.\n   * @return {number} Heartbeat interval in ms.\n   * @final\n   */\n  getHeartbeat () {\n    if (this.heartbeat) {\n      return this.heartbeat\n    } else if (this.parentTracker && this.parentTracker.heartbeat) {\n      return this.parentTracker.heartbeat\n    } else {\n      return 30000\n    }\n  }\n\n  /**\n   * Starts heartbeating. Interval period set by options.heartbeat. Min 5000 ms.\n   * This method is automaticaly called by the tracker once sendRequest is called.\n   */\n  startHeartbeat () {\n    this._heartbeatInterval = setInterval(\n      this.sendHeartbeat.bind(this),\n      Math.max(this.getHeartbeat(), 5000)\n    )\n  }\n\n  /**\n   * Stops heartbeating. This method is automaticaly called by the tracker.\n   */\n  stopHeartbeat () {\n    if (this._heartbeatInterval) {\n      clearInterval(this._heartbeatInterval)\n    }\n  }\n\n  /**\n   * Heartbeating allows you to call this function each X milliseconds, defined by\n   * {@link getHeartbeat}. This is useful to send regular events to track changes.\n   *\n   * By default it will send {@link Tracker.Events.HEARTBEAT}.\n   * To start heartbeating use {@link startHeartbeat} and to stop them use {@link stopHeartbeat}.\n   *\n   * @example\n   * Override this method to define your own Heartbeat reporting.\n   *\n   * class TrackerChild extends Tracker {\n   *  sendHeartbeat (att) {\n   *    this.send('MY_HEARBEAT_EVENT')\n   *  }\n   * }\n   *\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendHeartbeat (att) {\n    this.send(Tracker.Events.HEARTBEAT, att)\n  }\n\n  /**\n   * Override this method to return attributes for actions.\n   *\n   * @example\n   * class SpecificTracker extends Tracker {\n   *  getAttributes(att) {\n   *    att = att || {}\n   *    att.information = 'something'\n   *    return att\n   *  }\n   * }\n   *\n   * @param {object} [att] Collection of key value attributes\n   * @return {object} Filled attributes\n   * @final\n   */\n  getAttributes (att) {\n    att = att || {}\n    att.trackerName = this.getTrackerName()\n    att.trackerVersion = this.getTrackerVersion()\n    att.coreVersion = pkg.version\n    att.timeSinceTrackerReady = this._trackerReadyChrono.getDeltaTime()\n\n    for (let key in this.customData) {\n      att[key] = this.customData[key]\n    }\n\n    return att\n  }\n\n  /** Override to change of the Version of tracker. ie: '1.0.1' */\n  getTrackerVersion () {\n    return pkg.version\n  }\n\n  /** Override to change of the Name of the tracker. ie: 'custom-html5' */\n  getTrackerName () {\n    return 'base-tracker'\n  }\n\n  /**\n   * Send given event. Will automatically call {@see getAttributes} to fill information.\n   * Internally, this will call {@see Emitter#emit}, so you could listen any event fired.\n   *\n   * @example\n   * tracker.send('BANNER_CLICK', { url: 'http....' })\n   *\n   * @param {string} event Event name\n   * @param {object} [att] Key:value dictionary filled with attributes.\n   */\n  send (event, att) {\n    this.emit(event, this.getAttributes(att))\n  }\n}\n\n/**\n * Enumeration of events fired by this class.\n *\n * @static\n * @memberof Tracker\n * @enum\n */\nTracker.Events = {\n  HEARTBEAT: 'HEARTBEAT'\n}\n\nexport default Tracker\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/newrelic-video-core/src/tracker.js","module.exports = {\"_from\":\"github:newrelic/video-core-js#v0.10.0\",\"_id\":\"newrelic-video-core@0.10.0\",\"_inBundle\":false,\"_location\":\"/newrelic-video-core\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"git\",\"raw\":\"github:newrelic/video-core-js#v0.10.0\",\"rawSpec\":\"github:newrelic/video-core-js#v0.10.0\",\"saveSpec\":\"github:newrelic/video-core-js#v0.10.0\",\"fetchSpec\":null,\"gitCommittish\":\"v0.10.0\"},\"_requiredBy\":[\"#USER\",\"/\"],\"_resolved\":\"github:newrelic/video-core-js#5c39206664b1fa0a5647a2a9e9c5a9c326cca41c\",\"_spec\":\"github:newrelic/video-core-js#v0.10.0\",\"_where\":\"/Users/jaguilargorina/workspace/nrvideo/trackers/html5\",\"author\":{\"name\":\"Jordi Aguilar\"},\"bugs\":{\"url\":\"https://github.com/newrelic/video-core-js/issues\"},\"bundleDependencies\":false,\"dependencies\":{},\"deprecated\":false,\"description\":\"New Relic video tracking core library\",\"devDependencies\":{\"aws-sdk\":\"^2.150.0\",\"babel-core\":\"^6.25.0\",\"babel-loader\":\"^7.1.1\",\"babel-preset-env\":\"^1.6.0\",\"chai\":\"^4.1.0\",\"ink-docstrap\":\"^1.3.0\",\"jsdoc\":\"^3.5.4\",\"jsdoc-babel\":\"^0.3.0\",\"mocha\":\"^3.5.0\",\"nyc\":\"^11.1.0\",\"sinon\":\"^2.4.1\",\"webpack\":\"^3.4.1\"},\"homepage\":\"https://github.com/newrelic/video-core-js#readme\",\"license\":\"MIT\",\"main\":\"src/index.js\",\"name\":\"newrelic-video-core\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/newrelic/video-core-js.git\"},\"scripts\":{\"build\":\"webpack -p\",\"build:dev\":\"webpack\",\"clean\":\"rm -rf dist coverage doc\",\"deploy\":\"node scripts/deploy.js\",\"doc\":\"jsdoc -c jsdoc.json -d doc\",\"test\":\"nyc --reporter=html --reporter=text mocha --compilers js:babel-core/register\",\"watch\":\"webpack -p --progress --color --watch\",\"watch:dev\":\"webpack --progress --color --watch\"},\"version\":\"0.10.0\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/newrelic-video-core/package.json\n// module id = 5\n// module chunks = 0","import Chrono from './chrono'\n\n/**\n * State machine for a VideoTracker and its monitored video.\n */\nclass VideoTrackerState {\n  /** Constructor */\n  constructor () {\n    this.reset()\n\n    /**\n     * Time when the VideoTrackerState was initializated.\n     * @private\n     */\n    this._createdAt = Date.now()\n  }\n\n  /** Resets all flags and chronos. */\n  reset () {\n    /**\n     * Unique identifier of the view.\n     * @private\n     */\n    this._viewSession = null\n\n    /**\n     * Number of views seen.\n     * @private\n     */\n    this._viewCount = 0\n\n    /**\n     * True if it is tracking ads.\n     * @private\n     */\n    this._isAd = false\n\n    /**\n     * Number of errors fired. 'End' resets it.\n     */\n    this.numberOfErrors = 0\n\n    /**\n     * Number of ads shown.\n     */\n    this.numberOfAds = 0\n\n    /**\n     * Number of videos played.\n     */\n    this.numberOfVideos = 0\n\n    /**\n     * The amount of ms the user has been watching content (not paused, not buffering, not ads...)\n     */\n    this.totalPlaytime = 0\n\n    this.resetFlags()\n    this.resetChronos()\n  }\n\n  /** Resets flags. */\n  resetFlags () {\n    /** True once the player has finished loading. */\n    this.isPlayerReady = false\n\n    /** True if the video has been user-requested to play. ie: user cicks play. */\n    this.isRequested = false\n\n    /** True if the video has starting playing. ie: actual images/audio showing in screen. */\n    this.isStarted = false\n\n    /** True if the video is paused. */\n    this.isPaused = false\n\n    /** True if the video is performing a seek action. */\n    this.isSeeking = false\n\n    /** True if the video is currently buffering. */\n    this.isBuffering = false\n\n    /** True if you are in the middle of an ad break. */\n    this.isAdBreak = false\n\n    /** True if the video is currently playing (not buffering, not paused...) */\n    this.isPlaying = false\n  }\n\n  /** Resets chronos. */\n  resetChronos () {\n    /** Chrono that counts time since last requested event. */\n    this.timeSinceRequested = new Chrono()\n\n    /** Chrono that counts time since last start event. */\n    this.timeSinceStarted = new Chrono()\n\n    /** Chrono that counts time since last pause event. */\n    this.timeSincePaused = new Chrono()\n\n    /** Chrono that counts time since last seeking start event. */\n    this.timeSinceSeekBegin = new Chrono()\n\n    /** Chrono that counts time since last buffering start event. */\n    this.timeSinceBufferBegin = new Chrono()\n\n    /** Chrono that counts time since last ad break start event. */\n    this.timeSinceAdBreakStart = new Chrono()\n\n    /** Chrono that counts time since last download event. */\n    this.timeSinceLastDownload = new Chrono()\n\n    /** Chrono that counts time since last heartbeat. */\n    this.timeSinceLastHeartbeat = new Chrono()\n\n    /** Chrono that counts time since last rendition change. */\n    this.timeSinceLastRenditionChange = new Chrono()\n\n    /** Ads only. Chrono that counts time since last ad quartile. */\n    this.timeSinceLastAdQuartile = new Chrono()\n\n    /** Content only. Chrono that counts time since last AD_END. */\n    this.timeSinceLastAd = new Chrono()\n\n    /** Chrono that counts the ammount of time the video have been playing since the last event. */\n    this.playtimeSinceLastEvent = new Chrono()\n  }\n\n  /** Returns true if the tracker is currently on ads. */\n  isAd () {\n    return this._isAd\n  }\n\n  /** Sets if the tracker is currenlty tracking ads */\n  setIsAd (isAd) {\n    this._isAd = isAd\n  }\n\n  /**\n   * Returns a random-generated view Session ID, useful to sort by views.\n   */\n  getViewSession () {\n    if (!this._viewSession) {\n      let time = new Date().getTime()\n      let random = Math.random().toString(36).substring(2) + Math.random().toString(36).substring(2)\n\n      this._viewSession = time + '-' + random\n    }\n\n    return this._viewSession\n  }\n\n  /**\n   * Returns a random-generated view Session ID, plus a view count, allowing you to distinguish\n   * between two videos played in the same session.\n   */\n  getViewId () {\n    return this.getViewSession() + '-' + this._viewCount\n  }\n\n  /**\n   * Fills given object with state-based attributes.\n   *\n   * @param {object} att Collection fo key value attributes\n   * @return {object} Filled attributes\n   */\n  getStateAttributes (att) {\n    att = att || {}\n\n    if (this.isAd()) { // Ads only\n      if (this.isRequested) {\n        att.timeSinceAdRequested = this.timeSinceRequested.getDeltaTime()\n        att.timeSinceLastAdHeartbeat = this.timeSinceLastHeartbeat.getDeltaTime()\n      }\n      if (this.isStarted) att.timeSinceAdStarted = this.timeSinceStarted.getDeltaTime()\n      if (this.isPaused) att.timeSinceAdPaused = this.timeSincePaused.getDeltaTime()\n      if (this.isBuffering) att.timeSinceAdBufferBegin = this.timeSinceBufferBegin.getDeltaTime()\n      if (this.isSeeking) att.timeSinceAdSeekBegin = this.timeSinceSeekBegin.getDeltaTime()\n      if (this.isAdBreak) att.timeSinceAdBreakBegin = this.timeSinceAdBreakStart.getDeltaTime()\n      att.numberOfAds = this.numberOfAds\n    } else { // Content only\n      if (this.isRequested) {\n        att.timeSinceRequested = this.timeSinceRequested.getDeltaTime()\n        att.timeSinceLastHeartbeat = this.timeSinceLastHeartbeat.getDeltaTime()\n      }\n      if (this.isStarted) att.timeSinceStarted = this.timeSinceStarted.getDeltaTime()\n      if (this.isPaused) att.timeSincePaused = this.timeSincePaused.getDeltaTime()\n      if (this.isBuffering) att.timeSinceBufferBegin = this.timeSinceBufferBegin.getDeltaTime()\n      if (this.isSeeking) att.timeSinceSeekBegin = this.timeSinceSeekBegin.getDeltaTime()\n      att.timeSinceLastAd = this.timeSinceLastAd.getDeltaTime()\n      att.numberOfVideos = this.numberOfVideos\n    }\n    att.numberOfErrors = this.numberOfErrors\n\n    // Playtime\n    if (!this.isAd()) { // Content only\n      if (this.playtimeSinceLastEvent.startTime > 0) {\n        att.playtimeSinceLastEvent = this.playtimeSinceLastEvent.getDeltaTime()\n      } else {\n        att.playtimeSinceLastEvent = 0\n      }\n      if (this.isPlaying) {\n        this.playtimeSinceLastEvent.start()\n      } else {\n        this.playtimeSinceLastEvent.reset()\n      }\n      this.totalPlaytime += att.playtimeSinceLastEvent\n      att.totalPlaytime = this.totalPlaytime\n    }\n\n    return att\n  }\n\n  /**\n   * Augments view count. This will be called with each *_START and *_END.\n   */\n  goViewCountUp () {\n    this._viewCount++\n  }\n\n  /**\n   * Checks flags and changes state.\n   * @returns {boolean} True if the state changed.\n   */\n  goPlayerReady () {\n    if (!this.isPlayerReady) {\n      this.isPlayerReady = true\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goRequest () {\n    if (!this.isRequested) {\n      this.isRequested = true\n      this.timeSinceLastAd.reset()\n      this.timeSinceRequested.start()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goStart () {\n    if (this.isRequested && !this.isStarted) {\n      if (this.isAd()) {\n        this.numberOfAds++\n      } else {\n        this.numberOfVideos++\n      }\n      this.isStarted = true\n      this.isPlaying = true\n      this.timeSinceStarted.start()\n      this.playtimeSinceLastEvent.start()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goEnd () {\n    if (this.isRequested) {\n      this.numberOfErrors = 0\n      this.isPlaying = false\n      this.resetFlags()\n      this.timeSinceRequested.stop()\n      this.timeSinceStarted.stop()\n      this.playtimeSinceLastEvent.stop()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goPause () {\n    if (this.isStarted && !this.isPaused) {\n      this.isPaused = true\n      this.isPlaying = false\n      this.timeSincePaused.start()\n      this.playtimeSinceLastEvent.stop()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goResume () {\n    if (this.isStarted && this.isPaused) {\n      this.isPaused = false\n      this.isPlaying = true\n      this.timeSincePaused.stop()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goBufferStart () {\n    if (this.isStarted && !this.isBuffering) {\n      this.isBuffering = true\n      this.isPlaying = false\n      this.timeSinceBufferBegin.start()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goBufferEnd () {\n    if (this.isStarted && this.isBuffering) {\n      this.isBuffering = false\n      this.isPlaying = true\n      this.timeSinceBufferBegin.stop()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goSeekStart () {\n    if (this.isStarted && !this.isSeeking) {\n      this.isSeeking = true\n      this.isPlaying = false\n      this.timeSinceSeekBegin.start()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goSeekEnd () {\n    if (this.isStarted && this.isSeeking) {\n      this.isSeeking = false\n      this.isPlaying = true\n      this.timeSinceSeekBegin.stop()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goAdBreakStart () {\n    if (!this.isAdBreak) {\n      this.isAdBreak = true\n      this.timeSinceAdBreakStart.start()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Checks flags and changes state\n   * @returns {boolean} True if the state changed.\n   */\n  goAdBreakEnd () {\n    if (this.isAdBreak) {\n      this.isAdBreak = false\n      this.timeSinceAdBreakStart.stop()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Restarts download chrono.\n   */\n  goDownload () {\n    this.timeSinceLastDownload.start()\n  }\n\n  /**\n   * Restarts heartbeat chrono.\n   */\n  goHeartbeat () {\n    this.timeSinceLastHeartbeat.start()\n  }\n\n  /**\n   * Restarts rendition change chrono.\n   */\n  goRenditionChange () {\n    this.timeSinceLastRenditionChange.start()\n  }\n\n  /**\n   * Restarts ad quartile chrono.\n   */\n  goAdQuartile () {\n    this.timeSinceLastAdQuartile.start()\n  }\n\n  /**\n   * Increments error counter.\n   */\n  goError () {\n    this.numberOfErrors++\n  }\n\n  /**\n   * Restarts last ad chrono.\n   */\n  goLastAd () {\n    this.timeSinceLastAd.start()\n  }\n}\n\nexport default VideoTrackerState\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/newrelic-video-core/src/videotrackerstate.js","import * as nrvideo from 'newrelic-video-core'\nimport Html5Tracker from './tracker'\n\nnrvideo.Html5Tracker = Html5Tracker\nmodule.exports = nrvideo\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import Log from './log'\n\n/**\n * Static class that sums up core functionalities of the library.\n * @static\n */\nclass Core {\n  /**\n   * Add a tracker to the system. Trackers added will start reporting its events to NR's backend.\n   *\n   * @param {(Emitter|Tracker)} tracker\n   */\n  static addTracker (tracker) {\n    if (tracker.on && tracker.emit) {\n      trackers.push(tracker)\n      tracker.on('*', eventHandler)\n    } else {\n      Log.error('Tried to load a non-tracker.', tracker)\n    }\n  }\n\n  /**\n   * Disposes and remove given tracker. Removes its listeners.\n   *\n   * @param {Tracker} tracker Tracker to remove.\n   */\n  static removeTracker (tracker) {\n    tracker.off('*', eventHandler)\n    tracker.dispose()\n    let index = trackers.indexOf(tracker)\n    if (index !== -1) trackers.splice(index, 1)\n  }\n\n  /**\n   * Returns the array of trackers.\n   *\n   * @returns {Tracker[]} Array of trackers.\n   */\n  static getTrackers () {\n    return trackers\n  }\n\n  /**\n   * Sends given event. Uses newrelic Browser Agent.\n   * @param {String} event Event to send.\n   * @param {Object} data Data associated to the event.\n   */\n  static send (event, data) {\n    if (typeof newrelic !== 'undefined' && newrelic.addPageAction) {\n      newrelic.addPageAction(event, data)\n    } else {\n      if (!isErrorShown) {\n        Log.error(\n          'newrelic.addPageAction() is not available.',\n          'In order to use NewRelic Video you will need New Relic Browser Agent.'\n        )\n        isErrorShown = true\n      }\n    }\n  }\n\n  /**\n   * Sends an error event. This may be used for external errors launched by the app, the network or\n   * any external factor. Note that errors within the player are normally reported with\n   * tracker.sendError, so this method should not be used to report those.\n   *\n   * @param {object} att attributes to be sent along the error.\n   */\n  static sendError (att) {\n    Core.send('ERROR', att)\n  }\n}\n\nlet trackers = []\nlet isErrorShown = false\n\n/**\n * Logs and sends given event.\n *\n * @private\n * @param {Event} e Event\n */\nfunction eventHandler (e) {\n  let data = cleanData(e.data)\n  if (Log.level <= Log.Levels.DEBUG) {\n    Log.notice('Sent', e.type, data)\n  } else {\n    Log.notice('Sent', e.type)\n  }\n  Core.send(e.type, data)\n}\n\n/**\n * Cleans given object, removing all items with value === null.\n * @private\n * @param {Object} data Data to clean\n * @returns {Object} Cleaned object\n */\nfunction cleanData (data) {\n  let ret = {}\n  for (let i in data) {\n    if (data[i] !== null && typeof data[i] !== 'undefined') ret[i] = data[i]\n  }\n  return ret\n}\n\nexport default Core\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/newrelic-video-core/src/core.js","/**\n * Constants for the library.\n * @class Constants\n * @static\n */\nclass Constants {}\n\n/**\n * Enum for types/positions of ads.\n * @example var type = Constants.AdPositions.PRE\n * @enum {String}\n */\nConstants.AdPositions = {\n  /** For ads shown before the content. */\n  PRE: 'pre',\n  /** For ads shown during the content. */\n  MID: 'mid',\n  /** For ads shown after the content. */\n  POST: 'post'\n}\n\nexport default Constants\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/newrelic-video-core/src/constants.js","import Log from './log'\nimport Tracker from './tracker'\nimport TrackerState from './videotrackerstate'\n\n/**\n * Base video tracker class provides extensible tracking over video elements. See {@link Tracker}.\n * Extend this class to create your own video tracker class. Override getter methods and\n * registerListeners/unregisterListeners to provide full integration with your video experience.\n *\n * @example\n * Tracker instances should be added to Core library to start sending data:\n * nrvideo.Core.addTracker(new Tracker())\n *\n * @extends Tracker\n */\nclass VideoTracker extends Tracker {\n  /**\n   * Constructor, receives player and options.\n   * Lifecycle: constructor > {@link setOptions} > {@link setPlayer} > {@link registerListeners}.\n   *\n   * @param {Object} [player] Player to track. See {@link setPlayer}.\n   * @param {Object} [options] Options for the tracker. See {@link setOptions}.\n   */\n  constructor (player, options) {\n    super()\n\n    /**\n     * TrackerState instance. Stores the state of the view. Tracker will automatically update the\n     * state of its instance, so there's no need to modify/interact with it manually.\n     * @type TrackerState\n     */\n    this.state = new TrackerState()\n\n    /**\n     * Another Tracker instance to track ads.\n     * @type Tracker\n     */\n    this.adsTracker = null\n\n    options = options || {}\n    this.setOptions(options)\n    if (player) this.setPlayer(player, options.tag)\n\n    Log.notice('Tracker ' + this.getTrackerName() + ' v' + this.getTrackerVersion() + ' is ready.')\n  }\n\n  /**\n   * Set options for the Tracker.\n   *\n   * @param {Object} [options] Options for the tracker.\n   * @param {Boolean} [options.isAd] True if the tracker is tracking ads. See {@link setIsAd}.\n   * @param {number} [options.heartbeat] Set time between heartbeats. See {@link heartbeat}.\n   * @param {Object} [options.customData] Set custom data. See {@link customData}.\n   * @param {Tracker} [options.parentTracker] Set parent tracker. See {@link parentTracker}.\n   * @param {Tracker} [options.adsTracker] Set ads tracker. See {@link adsTracker}.\n   * @param {Object} [options.tag] DOM element to track. See {@link setPlayer}.\n   */\n  setOptions (options) {\n    if (options) {\n      if (options.adsTracker) this.setAdsTracker(options.adsTracker)\n      if (typeof options.isAd === 'boolean') this.setIsAd(options.isAd)\n      Tracker.prototype.setOptions.apply(this, arguments)\n    }\n  }\n\n  /**\n   * Set a player and/or a tag. If there was one already defined, it will call dispose() first.\n   * Will call this.registerListeners() afterwards.\n   *\n   * @param {Object|string} player New player to save as this.player. If a string is passed,\n   * document.getElementById will be called.\n   * @param {DOMObject|string} [tag] Optional DOMElement to save as this.tag. If a string is passed,\n   * document.getElementById will be called.\n   */\n  setPlayer (player, tag) {\n    if (this.player || this.tag) this.dispose()\n\n    if (typeof document !== 'undefined' && document.getElementById) {\n      if (typeof player === 'string') player = document.getElementById(player)\n      if (typeof tag === 'string') tag = document.getElementById(tag)\n    }\n\n    tag = tag || player // if no tag is passed, use player as both.\n\n    this.player = player\n    this.tag = tag\n    this.registerListeners()\n  }\n\n  /** Returns true if the tracker is currently on ads. */\n  isAd () {\n    return this.state.isAd()\n  }\n\n  /** Sets if the tracker is currenlty tracking ads */\n  setIsAd (isAd) {\n    this.state.setIsAd(isAd)\n  }\n\n  /**\n   * Use this function to set up a child ad tracker. You will be able to access it using\n   * this.adsTracker.\n   *\n   * @param {Tracker} tracker Ad tracker to add\n   */\n  setAdsTracker (tracker) {\n    this.disposeAdsTracker() // dispose current one\n    if (tracker) {\n      this.adsTracker = tracker\n      this.adsTracker.setIsAd(true)\n      this.adsTracker.parentTracker = this\n      this.adsTracker.on('*', funnelAdEvents.bind(this))\n    }\n  }\n\n  /**\n   * Dispose current adsTracker.\n   */\n  disposeAdsTracker () {\n    if (this.adsTracker) {\n      this.adsTracker.off('*', funnelAdEvents)\n      this.adsTracker.dispose()\n    }\n  }\n\n  /**\n   * Prepares tracker to dispose. Calls unregisterListener and drops references to player and tag.\n   */\n  dispose () {\n    this.stopHeartbeat()\n    this.disposeAdsTracker()\n    this.unregisterListeners()\n    this.player = null\n    this.tag = null\n  }\n\n  /**\n   * Override this method to register listeners to player/tag.\n   * @example\n   * class SpecificTracker extends Tracker {\n   *  registerListeners() {\n   *    this.player.on('play', () => this.playHandler)\n   *  }\n   *\n   *  playHandler() {\n   *    this.send(VideoTracker.Events.REQUESTED)\n   *  }\n   * }\n   */\n  registerListeners () { }\n\n  /**\n   * Override this method to unregister listeners to player/tag created in registerListeners\n   * @example\n   * class SpecificTracker extends Tracker {\n   *  registerListeners() {\n   *    this.player.on('play', () => this.playHandler)\n   *  }\n   *\n   *  unregisterListeners() {\n   *    this.player.off('play', () => this.playHandler)\n   *  }\n   *\n   *  playHandler() {\n   *    this.send(VideoTracker.Events.REQUESTED)\n   *  }\n   * }\n   */\n  unregisterListeners () { }\n\n  /**\n   * Trackers will generate unique id's for every new video iteration. If you have your own unique\n   * view value, you can override this method to return it.\n   * If the tracker has a parentTracker defined, parent viewId will be used.\n   */\n  getViewId () {\n    if (this.parentTracker) {\n      return this.parentTracker.getViewId()\n    } else {\n      return this.state.getViewId()\n    }\n  }\n\n  /**\n   * Trackers will generate unique id's for every new video session. If you have your own unique\n   * view value, you can override this method to return it.\n   * If the tracker has a parentTracker defined, parent viewId will be used.\n   */\n  getViewSession () {\n    if (this.parentTracker) {\n      return this.parentTracker.getViewSession()\n    } else {\n      return this.state.getViewSession()\n    }\n  }\n\n  /** Override to return the Id of the video. */\n  getVideoId () {\n    return null\n  }\n\n  /** Override to return Title of the video. */\n  getTitle () {\n    return null\n  }\n\n  /** Override to return True if the video is live. */\n  isLive () {\n    return null\n  }\n\n  /** Override to return Bitrate (in bits) of the video. */\n  getBitrate () {\n    return null\n  }\n\n  /** Calculates consumed bitrate using webkitVideoDecodedByteCount. */\n  getWebkitBitrate () {\n    if (this.tag && this.tag.webkitVideoDecodedByteCount) {\n      let bitrate\n      if (this._lastWebkitBitrate) {\n        bitrate = this.tag.webkitVideoDecodedByteCount\n        let delta = bitrate - this._lastWebkitBitrate\n        let seconds = this.getHeartbeat() / 1000\n        bitrate = Math.round((delta / seconds) * 8)\n      }\n      this._lastWebkitBitrate = this.tag.webkitVideoDecodedByteCount\n      return bitrate || null\n    }\n  }\n\n  /** Override to return Name of the rendition (ie: 1080p). */\n  getRenditionName () {\n    return null\n  }\n\n  /** Override to return Target Bitrate of the rendition. */\n  getRenditionBitrate () {\n    return null\n  }\n\n  /**\n   * This method will return 'up', 'down' or null depending on if the bitrate of the rendition\n   * have changed from the last time it was called.\n   *\n   * @param {boolean} [saveNewRendition=false] If true, current rendition will be stored to be used\n   * the next time this method is called. This allows you to call this.getRenditionShift() without\n   * saving the current rendition and thus preventing interferences with RENDITION_CHANGE events.\n   */\n  getRenditionShift (saveNewRendition) {\n    let current = this.getRenditionBitrate()\n    let last\n    if (this.isAd()) {\n      last = this._lastAdRendition\n      if (saveNewRendition) this._lastAdRendition = current\n    } else {\n      last = this._lastRendition\n      if (saveNewRendition) this._lastRendition = current\n    }\n\n    if (!current || !last) {\n      return null\n    } else {\n      if (current > last) {\n        return 'up'\n      } else if (current < last) {\n        return 'down'\n      } else {\n        return null\n      }\n    }\n  }\n\n  /** Override to return renidtion actual Height (before re-scaling). */\n  getRenditionHeight () {\n    return this.tag ? this.tag.videoHeight : null\n  }\n\n  /** Override to return rendition actual Width (before re-scaling). */\n  getRenditionWidth () {\n    return this.tag ? this.tag.videoWidth : null\n  }\n\n  /** Override to return Duration of the video, in ms. */\n  getDuration () {\n    return this.tag ? this.tag.duration : null\n  }\n\n  /** Override to return Playhead (currentTime) of the video, in ms. */\n  getPlayhead () {\n    return this.tag ? this.tag.currentTime : null\n  }\n\n  /**\n   * Override to return Language of the video. We recommend using locale notation, ie: en_US.\n   * {@see https://gist.github.com/jacobbubu/1836273}\n   */\n  getLanguage () {\n    return null\n  }\n\n  /** Override to return URL of the resource being played. */\n  getSrc () {\n    return this.tag ? this.tag.currentSrc : null\n  }\n\n  /** Override to return Playrate (speed) of the video. ie: 1.0, 0.5, 1.25... */\n  getPlayrate () {\n    return this.tag ? this.tag.playbackRate : null\n  }\n\n  /** Override to return True if the video is currently muted. */\n  isMuted () {\n    return this.tag ? this.tag.muted : null\n  }\n\n  /** Override to return True if the video is currently fullscreen. */\n  isFullscreen () {\n    return null\n  }\n\n  /** Override to return the CDN serving the content. */\n  getCdn () {\n    return null\n  }\n\n  /** Override to return the Name of the player. */\n  getPlayerName () {\n    return this.getTrackerName()\n  }\n\n  /** Override to return the Version of the player. */\n  getPlayerVersion () {\n    return null\n  }\n\n  /** Override to return current FPS (Frames per second). */\n  getFps () {\n    return null\n  }\n\n  /**\n   * Override to return if the player was autoplayed. By default: this.tag.autoplay\n   */\n  isAutoplayed () {\n    return this.tag ? this.tag.autoplay : null\n  }\n\n  /**\n   * Override to return the player preload attribute. By default: this.tag.preload\n   */\n  getPreload () {\n    return this.tag ? this.tag.preload : null\n  }\n\n  // Only for ads\n  /**\n   * Override to return Quartile of the ad. 0 before first, 1 after first quartile, 2 after\n   * midpoint, 3 after third quartile, 4 when completed.\n   */\n  getAdQuartile () {\n    return null\n  }\n\n  /**\n   * Override to return the position of the ad. Use {@link Constants.AdPositions} enum\n   * to fill this data.\n   */\n  getAdPosition () {\n    return this.state.isStarted ? 'pre' : 'mid'\n  }\n\n  /**\n   * Override to return the ad partner. ie: ima, freewheel...\n   */\n  getAdPartner () {\n    return null\n  }\n\n  /**\n   * Override to return the creative id of the ad.\n   */\n  getAdCreativeId () {\n    return null\n  }\n\n  /**\n   * Do NOT override. This method fills all the appropiate attributes for tracked video.\n   *\n   * @param {object} [att] Collection of key value attributes\n   * @return {object} Filled attributes\n   * @final\n   */\n  getAttributes (att) {\n    att = Tracker.prototype.getAttributes.apply(this, arguments)\n\n    if (typeof att.isAd === 'undefined') att.isAd = this.isAd()\n    att.viewSession = this.getViewSession()\n    att.viewId = this.getViewId()\n    att.playerName = this.getPlayerName()\n    att.playerVersion = this.getPlayerVersion()\n\n    try {\n      att.pageUrl = window.location.href\n    } catch (err) { /* skip */ }\n\n    if (this.isAd()) { // Ads\n      att.adId = this.getVideoId()\n      att.adTitle = this.getTitle()\n      att.adBitrate = this.getBitrate() || this.getWebkitBitrate()\n      att.adRenditionName = this.getRenditionName()\n      att.adRenditionBitrate = this.getRenditionBitrate()\n      att.adRenditionHeight = this.getRenditionHeight()\n      att.adRenditionWidth = this.getRenditionWidth()\n      att.adDuration = this.getDuration()\n      att.adPlayhead = this.getPlayhead()\n      att.adLanguage = this.getLanguage()\n      att.adSrc = this.getSrc()\n      att.adCdn = this.getCdn()\n      att.adIsMuted = this.isMuted()\n      att.adFps = this.getFps()\n      // ad exclusives\n      att.adQuartile = this.getAdQuartile()\n      att.adPosition = this.getAdPosition()\n      att.adCreativeId = this.getAdCreativeId()\n      att.adPartner = this.getAdPartner()\n    } else { // no ads\n      att.contentId = this.getVideoId()\n      att.contentTitle = this.getTitle()\n      att.contentIsLive = this.isLive()\n      att.contentBitrate = this.getBitrate() || this.getWebkitBitrate()\n      att.contentRenditionName = this.getRenditionName()\n      att.contentRenditionBitrate = this.getRenditionBitrate()\n      att.contentRenditionHeight = this.getRenditionHeight()\n      att.contentRenditionWidth = this.getRenditionWidth()\n      att.contentDuration = this.getDuration()\n      att.contentPlayhead = this.getPlayhead()\n      att.contentLanguage = this.getLanguage()\n      att.contentSrc = this.getSrc()\n      att.contentPlayrate = this.getPlayrate()\n      att.contentIsFullscreen = this.isFullscreen()\n      att.contentIsMuted = this.isMuted()\n      att.contentCdn = this.getCdn()\n      att.contentIsAutoplayed = this.isAutoplayed()\n      att.contentPreload = this.getPreload()\n      att.contentFps = this.getFps()\n    }\n\n    this.state.getStateAttributes(att)\n\n    for (let key in this.customData) {\n      att[key] = this.customData[key]\n    }\n\n    return att\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendPlayerReady (att) {\n    if (this.state.goPlayerReady()) {\n      att = att || {}\n      this.send(VideoTracker.Events.PLAYER_READY, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners. Calls\n   * {@link startHeartbeat}.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendRequest (att) {\n    if (this.state.goRequest()) {\n      this.state.goViewCountUp()\n      let ev = this.isAd() ? VideoTracker.Events.AD_REQUEST : VideoTracker.Events.CONTENT_REQUEST\n      this.send(ev, att)\n      this.startHeartbeat()\n      this.state.goHeartbeat()\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendStart (att) {\n    if (this.state.goStart()) {\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_START\n        if (this.parentTracker) this.parentTracker.state.isPlaying = false\n      } else {\n        ev = VideoTracker.Events.CONTENT_START\n      }\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners. Calls\n   * {@link stopHeartbeat}.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendEnd (att) {\n    if (this.state.goEnd()) {\n      att = att || {}\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_END\n        att.timeSinceAdRequested = this.state.timeSinceRequested.getDeltaTime()\n        att.timeSinceAdStarted = this.state.timeSinceStarted.getDeltaTime()\n        if (this.parentTracker) this.parentTracker.state.isPlaying = true\n      } else {\n        ev = VideoTracker.Events.CONTENT_END\n        att.timeSinceRequested = this.state.timeSinceRequested.getDeltaTime()\n        att.timeSinceStarted = this.state.timeSinceStarted.getDeltaTime()\n      }\n      this.stopHeartbeat()\n      this.send(ev, att)\n      if (this.parentTracker && this.isAd()) this.parentTracker.state.goLastAd()\n\n      this.state.goViewCountUp()\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendPause (att) {\n    if (this.state.goPause()) {\n      let ev = this.isAd() ? VideoTracker.Events.AD_PAUSE : VideoTracker.Events.CONTENT_PAUSE\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendResume (att) {\n    if (this.state.goResume()) {\n      att = att || {}\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_RESUME\n        att.timeSinceAdPaused = this.state.timeSincePaused.getDeltaTime()\n      } else {\n        ev = VideoTracker.Events.CONTENT_RESUME\n        att.timeSincePaused = this.state.timeSincePaused.getDeltaTime()\n      }\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendBufferStart (att) {\n    if (this.state.goBufferStart()) {\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_BUFFER_START\n      } else {\n        ev = VideoTracker.Events.CONTENT_BUFFER_START\n      }\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendBufferEnd (att) {\n    if (this.state.goBufferEnd()) {\n      att = att || {}\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_BUFFER_END\n        att.timeSinceAdBufferBegin = this.state.timeSinceBufferBegin.getDeltaTime()\n      } else {\n        ev = VideoTracker.Events.CONTENT_BUFFER_END\n        att.timeSinceBufferBegin = this.state.timeSinceBufferBegin.getDeltaTime()\n      }\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendSeekStart (att) {\n    if (this.state.goSeekStart()) {\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_SEEK_START\n      } else {\n        ev = VideoTracker.Events.CONTENT_SEEK_START\n      }\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendSeekEnd (att) {\n    if (this.state.goSeekEnd()) {\n      att = att || {}\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_SEEK_END\n        att.timeSinceAdSeekBegin = this.state.timeSinceSeekBegin.getDeltaTime()\n      } else {\n        ev = VideoTracker.Events.CONTENT_SEEK_END\n        att.timeSinceSeekBegin = this.state.timeSinceSeekBegin.getDeltaTime()\n      }\n      this.send(ev, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   * @param {String} att.state Download requires a string to distinguish different states.\n   */\n  sendDownload (att) {\n    att = att || {}\n    if (!att.state) Log.warn('Called sendDownload without { state: xxxxx }.')\n    this.send(VideoTracker.Events.DOWNLOAD, att)\n    this.state.goDownload()\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendError (att) {\n    att = att || {}\n    att.isAd = true\n    this.state.goError()\n    let ev = this.isAd() ? VideoTracker.Events.AD_ERROR : VideoTracker.Events.CONTENT_ERROR\n    this.send(ev, att)\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendRenditionChanged (att) {\n    att = att || {}\n    att.timeSinceLastRenditionChange = this.state.timeSinceLastRenditionChange.getDeltaTime()\n    att.shift = this.getRenditionShift(true)\n    let ev\n    if (this.isAd()) {\n      ev = VideoTracker.Events.AD_RENDITION_CHANGE\n    } else {\n      ev = VideoTracker.Events.CONTENT_RENDITION_CHANGE\n    }\n    this.send(ev, att)\n    this.state.goRenditionChange()\n  }\n\n  /**\n   * Sends associated event and changes view state. Heartbeat will automatically be sent every\n   * 10 seconds. There's no need to call this manually.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   * @param {number} att.url Url of the clicked ad.\n   *\n   */\n  sendHeartbeat (att) {\n    if (this.state.isRequested) {\n      let ev\n      if (this.isAd()) {\n        ev = VideoTracker.Events.AD_HEARTBEAT\n      } else {\n        ev = VideoTracker.Events.CONTENT_HEARTBEAT\n      }\n      this.send(ev, att)\n      this.state.goHeartbeat()\n    }\n  }\n\n  // Only ads\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendAdBreakStart (att) {\n    if (this.isAd() && this.state.goAdBreakStart()) {\n      this.send(VideoTracker.Events.AD_BREAK_START, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   */\n  sendAdBreakEnd (att) {\n    if (this.isAd() && this.state.goAdBreakEnd()) {\n      att = att || {}\n      att.timeSinceAdBreakBegin = this.state.timeSinceAdBreakStart.getDeltaTime()\n      this.send(VideoTracker.Events.AD_BREAK_END, att)\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   * @param {number} att.quartile Number of the quartile.\n   */\n  sendAdQuartile (att) {\n    if (this.isAd()) {\n      att = att || {}\n      if (!att.quartile) Log.warn('Called sendAdQuartile without { quartile: xxxxx }.')\n      att.timeSinceLastAdQuartile = this.state.timeSinceLastAdQuartile.getDeltaTime()\n      this.send(VideoTracker.Events.AD_QUARTILE, att)\n      this.state.goAdQuartile()\n    }\n  }\n\n  /**\n   * Sends associated event and changes view state. An internal state machine will prevent\n   * duplicated events. Should be associated to an event using registerListeners.\n   * @param {Object} [att] Collection of key:value attributes to send with the request.\n   * @param {number} att.url Url of the clicked ad.\n   */\n  sendAdClick (att) {\n    if (this.isAd()) {\n      att = att || {}\n      if (!att.url) Log.warn('Called sendAdClick without { url: xxxxx }.')\n      this.send(VideoTracker.Events.AD_CLICK, att)\n    }\n  }\n}\n\n/**\n * Enumeration of events fired by this class.\n *\n * @static\n * @memberof VideoTracker\n * @enum\n */\nVideoTracker.Events = {\n  // Player\n  PLAYER_READY: 'PLAYER_READY',\n  DOWNLOAD: 'DOWNLOAD',\n  ERROR: 'ERROR',\n\n  // Video\n  CONTENT_REQUEST: 'CONTENT_REQUEST',\n  CONTENT_START: 'CONTENT_START',\n  CONTENT_END: 'CONTENT_END',\n  CONTENT_PAUSE: 'CONTENT_PAUSE',\n  CONTENT_RESUME: 'CONTENT_RESUME',\n  CONTENT_SEEK_START: 'CONTENT_SEEK_START',\n  CONTENT_SEEK_END: 'CONTENT_SEEK_END',\n  CONTENT_BUFFER_START: 'CONTENT_BUFFER_START',\n  CONTENT_BUFFER_END: 'CONTENT_BUFFER_END',\n  CONTENT_HEARTBEAT: 'CONTENT_HEARTBEAT',\n  CONTENT_RENDITION_CHANGE: 'CONTENT_RENDITION_CHANGE',\n  CONTENT_ERROR: 'CONTENT_ERROR',\n\n  // Ads only\n  AD_REQUEST: 'AD_REQUEST',\n  AD_START: 'AD_START',\n  AD_END: 'AD_END',\n  AD_PAUSE: 'AD_PAUSE',\n  AD_RESUME: 'AD_RESUME',\n  AD_SEEK_START: 'AD_SEEK_START',\n  AD_SEEK_END: 'AD_SEEK_END',\n  AD_BUFFER_START: 'AD_BUFFER_START',\n  AD_BUFFER_END: 'AD_BUFFER_END',\n  AD_HEARTBEAT: 'AD_HEARTBEAT',\n  AD_RENDITION_CHANGE: 'AD_RENDITION_CHANGE',\n  AD_ERROR: 'AD_ERROR',\n  AD_BREAK_START: 'AD_BREAK_START',\n  AD_BREAK_END: 'AD_BREAK_END',\n  AD_QUARTILE: 'AD_QUARTILE',\n  AD_CLICK: 'AD_CLICK'\n}\n\n// Private members\nfunction funnelAdEvents (e) {\n  this.send(e.type, e.data)\n}\n\nexport default VideoTracker\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/newrelic-video-core/src/videotracker.js","import * as nrvideo from 'newrelic-video-core'\n\nexport default class Html5Tracker extends nrvideo.VideoTracker {\n  getTrackerName () {\n    return 'html5'\n  }\n\n  getPlayhead () {\n    return this.player.currentTime * 1000\n  }\n\n  getDuration () {\n    return this.player.duration * 1000\n  }\n\n  getSrc () {\n    return this.player.currentSrc\n  }\n\n  isMuted () {\n    return this.player.muted\n  }\n\n  getRenditionHeight () {\n    return this.player.videoHeight\n  }\n\n  getRenditionWidth () {\n    return this.player.videoWidth\n  }\n\n  getPlayrate () {\n    return this.player.playbackRate\n  }\n\n  isAutoplayed () {\n    return this.player.autoplay\n  }\n\n  getPreload () {\n    return this.player.preload\n  }\n\n  registerListeners () {\n    nrvideo.Log.debugCommonVideoEvents(this.player)\n\n    this.player.addEventListener('loadstart', this.onDownload.bind(this))\n    this.player.addEventListener('loadedmetadata', this.onDownload.bind(this))\n    this.player.addEventListener('loadeddata', this.onDownload.bind(this))\n    this.player.addEventListener('canplay', this.onDownload.bind(this))\n    this.player.addEventListener('play', this.onPlay.bind(this))\n    this.player.addEventListener('playing', this.onPlaying.bind(this))\n    this.player.addEventListener('pause', this.onPause.bind(this))\n    this.player.addEventListener('seeking', this.onSeeking.bind(this))\n    this.player.addEventListener('seeked', this.onSeeked.bind(this))\n    this.player.addEventListener('error', this.onError.bind(this))\n    this.player.addEventListener('ended', this.onEnded.bind(this))\n    this.player.addEventListener('waiting', this.onWaiting.bind(this))\n  }\n\n  unregisterListeners () {\n    this.player.removeEventListener('loadstart', this.onDownload)\n    this.player.removeEventListener('loadedmetadata', this.onDownload)\n    this.player.removeEventListener('loadeddata', this.onDownload)\n    this.player.removeEventListener('canplay', this.onDownload)\n    this.player.removeEventListener('play', this.onPlay)\n    this.player.removeEventListener('playing', this.onPlaying)\n    this.player.removeEventListener('pause', this.onPause)\n    this.player.removeEventListener('seeking', this.onSeeking)\n    this.player.removeEventListener('seeked', this.onSeeked)\n    this.player.removeEventListener('error', this.onError)\n    this.player.removeEventListener('ended', this.onEnded)\n    this.player.removeEventListener('waiting', this.onWaiting)\n  }\n\n  onDownload (e) {\n    this.sendDownload({ state: e.type })\n  }\n\n  onPlay () {\n    this.sendRequest()\n  }\n\n  onPlaying () {\n    this.sendBufferEnd()\n    this.sendResume()\n    this.sendStart()\n  }\n\n  onPause () {\n    this.sendPause()\n  }\n\n  onSeeking () {\n    this.sendSeekStart()\n  }\n\n  onSeeked () {\n    this.sendSeekEnd()\n  }\n\n  onError () {\n    this.sendError()\n  }\n\n  onEnded () {\n    this.sendEnd()\n  }\n\n  onWaiting () {\n    if (\n      this.player.networkState === this.player.NETWORK_LOADING &&\n      this.player.readyState < this.player.HAVE_FUTURE_DATA\n    ) {\n      this.sendBufferStart()\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/tracker.js"],"sourceRoot":""}